// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	login "yufuture-gpt/app/user/cmd/api/internal/handler/login"
	org "yufuture-gpt/app/user/cmd/api/internal/handler/org"
	user "yufuture-gpt/app/user/cmd/api/internal/handler/user"
	"yufuture-gpt/app/user/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 获取图像验证码
				Method:  http.MethodPost,
				Path:    "/getCaptcha",
				Handler: login.GetCaptchaHandler(serverCtx),
			},
			{
				// 获取微信登录二维码
				Method:  http.MethodPost,
				Path:    "/getLoginQrCode",
				Handler: login.GetLoginQrCodeHandler(serverCtx),
			},
			{
				// 获取微信扫码登录状态
				Method:  http.MethodPost,
				Path:    "/getQrCodeLoginStatus",
				Handler: login.GetQrCodeLoginStatusHandler(serverCtx),
			},
			{
				// 获取手机短信验证码
				Method:  http.MethodPost,
				Path:    "/getVerificationCode",
				Handler: login.GetVerificationCodeHandler(serverCtx),
			},
			{
				// 登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				// 注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: login.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/login"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 微信回调绑定接口
				Method:  http.MethodGet,
				Path:    "/wechatCallBack",
				Handler: login.WechatCallBackGetHandler(serverCtx),
			},
			{
				// 微信回调
				Method:  http.MethodPost,
				Path:    "/wechatCallBack",
				Handler: login.WechatCallBackPostHandler(serverCtx),
			},
		},
		rest.WithPrefix("/wechat"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 同意用户申请加入团队
				Method:  http.MethodPost,
				Path:    "/agreeApplyJoinOrg",
				Handler: org.AgreeApplyJoinOrgHandler(serverCtx),
			},
			{
				// 用户同意邀请加入团队
				Method:  http.MethodPost,
				Path:    "/agreeInviteJoinOrg",
				Handler: org.AgreeInviteJoinOrgHandler(serverCtx),
			},
			{
				// 用户申请加入团队
				Method:  http.MethodPost,
				Path:    "/applyJoinOrg",
				Handler: org.ApplyJoinOrgHandler(serverCtx),
			},
			{
				// 修改用户角色
				Method:  http.MethodPost,
				Path:    "/changeUserRole",
				Handler: org.ChangeUserRoleHandler(serverCtx),
			},
			{
				// 创建角色
				Method:  http.MethodPost,
				Path:    "/createRole",
				Handler: org.CreateRoleHandler(serverCtx),
			},
			{
				// 删除用户
				Method:  http.MethodPost,
				Path:    "/deleteUser",
				Handler: org.DeleteUserHandler(serverCtx),
			},
			{
				// 获取团队权限树
				Method:  http.MethodPost,
				Path:    "/getOrgPermTree",
				Handler: org.GetOrgPermTreeHandler(serverCtx),
			},
			{
				// 获取团队角色列表
				Method:  http.MethodPost,
				Path:    "/getOrgRoleList",
				Handler: org.GetOrgRoleListHandler(serverCtx),
			},
			{
				// 获取团队店铺分页列表
				Method:  http.MethodPost,
				Path:    "/getOrgShopPageList",
				Handler: org.GetOrgShopPageListHandler(serverCtx),
			},
			{
				// 获取团队用户列表
				Method:  http.MethodPost,
				Path:    "/getOrgUserList",
				Handler: org.GetOrgUserListHandler(serverCtx),
			},
			{
				// 获取团队用户分页列表
				Method:  http.MethodPost,
				Path:    "/getOrgUserPageList",
				Handler: org.GetOrgUserPageListHandler(serverCtx),
			},
			{
				// 分配算力
				Method:  http.MethodPost,
				Path:    "/giverPower",
				Handler: org.GiverPowerHandler(serverCtx),
			},
			{
				// 平均分配算力
				Method:  http.MethodPost,
				Path:    "/giverPowerAvg",
				Handler: org.GiverPowerAvgHandler(serverCtx),
			},
			{
				// 分配店铺算力
				Method:  http.MethodPost,
				Path:    "/giverPowerShop",
				Handler: org.GiverPowerShopHandler(serverCtx),
			},
			{
				// 平均分配店铺算力
				Method:  http.MethodPost,
				Path:    "/giverPowerShopAvg",
				Handler: org.GiverPowerShopAvgHandler(serverCtx),
			},
			{
				// 邀请用户加入团队
				Method:  http.MethodPost,
				Path:    "/inviteJoinOrg",
				Handler: org.InviteJoinOrgHandler(serverCtx),
			},
			{
				// 暂停用户
				Method:  http.MethodPost,
				Path:    "/pauseUser",
				Handler: org.PauseUserHandler(serverCtx),
			},
			{
				// 恢复用户
				Method:  http.MethodPost,
				Path:    "/resumeUser",
				Handler: org.ResumeUserHandler(serverCtx),
			},
			{
				// 查找团队
				Method:  http.MethodPost,
				Path:    "/searchOrg",
				Handler: org.SearchOrgHandler(serverCtx),
			},
			{
				// 查找用户
				Method:  http.MethodPost,
				Path:    "/searchUser",
				Handler: org.SearchUserHandler(serverCtx),
			},
			{
				// 更新角色
				Method:  http.MethodPost,
				Path:    "/updateRole",
				Handler: org.UpdateRoleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/org"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 绑定手机号码
				Method:  http.MethodPost,
				Path:    "/bindPhone",
				Handler: user.BindPhoneHandler(serverCtx),
			},
			{
				// 切换组织
				Method:  http.MethodPost,
				Path:    "/changeOrg",
				Handler: user.ChangeOrgHandler(serverCtx),
			},
			{
				// 文件下载
				Method:  http.MethodGet,
				Path:    "/fileDownload/:path/:objectKey",
				Handler: user.FileDownloadHandler(serverCtx),
			},
			{
				// 文件上传
				Method:  http.MethodPost,
				Path:    "/fileUpload",
				Handler: user.FileUploadHandler(serverCtx),
			},
			{
				// 获取当前登录用户数据
				Method:  http.MethodPost,
				Path:    "/getCurrentUserData",
				Handler: user.GetCurrentUserDataHandler(serverCtx),
			},
			{
				// 获取消息列表
				Method:  http.MethodPost,
				Path:    "/getMessageList",
				Handler: user.GetMessageListHandler(serverCtx),
			},
			{
				// 获取用户组织列表
				Method:  http.MethodPost,
				Path:    "/getOrgList",
				Handler: user.GetOrgListHandler(serverCtx),
			},
			{
				// 忽略消息
				Method:  http.MethodPost,
				Path:    "/ignoreMessage",
				Handler: user.IgnoreMessageHandler(serverCtx),
			},
			{
				// 退出登录
				Method:  http.MethodPost,
				Path:    "/logOut",
				Handler: user.LogOutHandler(serverCtx),
			},
			{
				// 更新头像
				Method:  http.MethodPost,
				Path:    "/updateHeadImg",
				Handler: user.UpdateHeadImgHandler(serverCtx),
			},
			{
				// 更新昵称
				Method:  http.MethodPost,
				Path:    "/updateNickName",
				Handler: user.UpdateNickNameHandler(serverCtx),
			},
			{
				// 更新组织名称
				Method:  http.MethodPost,
				Path:    "/updateOrgName",
				Handler: user.UpdateOrgNameHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/user"),
	)
}
