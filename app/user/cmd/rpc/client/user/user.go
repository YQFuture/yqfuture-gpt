// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"yufuture-gpt/app/user/cmd/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BindPhoneReq        = user.BindPhoneReq
	BindPhoneResp       = user.BindPhoneResp
	ChangeOrgReq        = user.ChangeOrgReq
	ChangeOrgResp       = user.ChangeOrgResp
	CurrentUserData     = user.CurrentUserData
	CurrentUserDataReq  = user.CurrentUserDataReq
	CurrentUserDataResp = user.CurrentUserDataResp
	LoginReq            = user.LoginReq
	LoginResp           = user.LoginResp
	OrgInfo             = user.OrgInfo
	OrgListReq          = user.OrgListReq
	OrgListResp         = user.OrgListResp
	RegisterReq         = user.RegisterReq
	RegisterResp        = user.RegisterResp
	UserInfo            = user.UserInfo
	WechatUserInfoReq   = user.WechatUserInfoReq
	WechatUserInfoResp  = user.WechatUserInfoResp

	User interface {
		// 获取当前登录用户数据
		GetCurrentUserData(ctx context.Context, in *CurrentUserDataReq, opts ...grpc.CallOption) (*CurrentUserDataResp, error)
		// 绑定手机号
		BindPhone(ctx context.Context, in *BindPhoneReq, opts ...grpc.CallOption) (*BindPhoneResp, error)
		// 获取用户组织列表
		GetOrgList(ctx context.Context, in *OrgListReq, opts ...grpc.CallOption) (*OrgListResp, error)
		// 切换组织
		ChangeOrg(ctx context.Context, in *ChangeOrgReq, opts ...grpc.CallOption) (*ChangeOrgResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 获取当前登录用户数据
func (m *defaultUser) GetCurrentUserData(ctx context.Context, in *CurrentUserDataReq, opts ...grpc.CallOption) (*CurrentUserDataResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetCurrentUserData(ctx, in, opts...)
}

// 绑定手机号
func (m *defaultUser) BindPhone(ctx context.Context, in *BindPhoneReq, opts ...grpc.CallOption) (*BindPhoneResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.BindPhone(ctx, in, opts...)
}

// 获取用户组织列表
func (m *defaultUser) GetOrgList(ctx context.Context, in *OrgListReq, opts ...grpc.CallOption) (*OrgListResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetOrgList(ctx, in, opts...)
}

// 切换组织
func (m *defaultUser) ChangeOrg(ctx context.Context, in *ChangeOrgReq, opts ...grpc.CallOption) (*ChangeOrgResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangeOrg(ctx, in, opts...)
}
