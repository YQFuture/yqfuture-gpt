// Code generated by goctl. DO NOT EDIT.
// Source: org.proto

package org

import (
	"context"

	"yufuture-gpt/app/user/cmd/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AgreeApplyJoinOrgReq   = user.AgreeApplyJoinOrgReq
	AgreeApplyJoinOrgResp  = user.AgreeApplyJoinOrgResp
	AgreeInviteJoinOrgReq  = user.AgreeInviteJoinOrgReq
	AgreeInviteJoinOrgResp = user.AgreeInviteJoinOrgResp
	ApplyJoinOrgReq        = user.ApplyJoinOrgReq
	ApplyJoinOrgResp       = user.ApplyJoinOrgResp
	CreateRoleReq          = user.CreateRoleReq
	CreateRoleResp         = user.CreateRoleResp
	InviteJoinOrgReq       = user.InviteJoinOrgReq
	InviteJoinOrgResp      = user.InviteJoinOrgResp
	OrgPerm                = user.OrgPerm
	OrgPermListReq         = user.OrgPermListReq
	OrgPermListResp        = user.OrgPermListResp
	OrgRole                = user.OrgRole
	OrgRoleListReq         = user.OrgRoleListReq
	OrgRoleListResp        = user.OrgRoleListResp
	OrgUser                = user.OrgUser
	OrgUserPageListReq     = user.OrgUserPageListReq
	OrgUserPageListResp    = user.OrgUserPageListResp
	RolePerm               = user.RolePerm
	RoleShop               = user.RoleShop
	RoleUser               = user.RoleUser
	SearchOrgInfo          = user.SearchOrgInfo
	SearchOrgReq           = user.SearchOrgReq
	SearchOrgReqResp       = user.SearchOrgReqResp
	SearchUserInfo         = user.SearchUserInfo
	SearchUserReq          = user.SearchUserReq
	SearchUserResp         = user.SearchUserResp
	UpdateRoleReq          = user.UpdateRoleReq
	UpdateRoleResp         = user.UpdateRoleResp
	UserPerm               = user.UserPerm
	UserRole               = user.UserRole

	Org interface {
		// 查找团队
		SearchOrg(ctx context.Context, in *SearchOrgReq, opts ...grpc.CallOption) (*SearchOrgReqResp, error)
		// 查找用户
		SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
		// 用户申请加入团队
		ApplyJoinOrg(ctx context.Context, in *ApplyJoinOrgReq, opts ...grpc.CallOption) (*ApplyJoinOrgResp, error)
		// 邀请用户加入团队
		InviteJoinOrg(ctx context.Context, in *InviteJoinOrgReq, opts ...grpc.CallOption) (*InviteJoinOrgResp, error)
		// 同意用户申请加入团队
		AgreeApplyJoinOrg(ctx context.Context, in *AgreeApplyJoinOrgReq, opts ...grpc.CallOption) (*AgreeApplyJoinOrgResp, error)
		// 同意用户邀请加入团队
		AgreeInviteJoinOrg(ctx context.Context, in *AgreeInviteJoinOrgReq, opts ...grpc.CallOption) (*AgreeInviteJoinOrgResp, error)
		// 获取团队角色列表
		GetOrgRoleList(ctx context.Context, in *OrgRoleListReq, opts ...grpc.CallOption) (*OrgRoleListResp, error)
		// 获取团队权限列表
		GetOrgPermList(ctx context.Context, in *OrgPermListReq, opts ...grpc.CallOption) (*OrgPermListResp, error)
		// 创建角色
		CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error)
		// 更新角色
		UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
		// 获取团队用户分页列表
		GetOrgUserPageList(ctx context.Context, in *OrgUserPageListReq, opts ...grpc.CallOption) (*OrgUserPageListResp, error)
	}

	defaultOrg struct {
		cli zrpc.Client
	}
)

func NewOrg(cli zrpc.Client) Org {
	return &defaultOrg{
		cli: cli,
	}
}

// 查找团队
func (m *defaultOrg) SearchOrg(ctx context.Context, in *SearchOrgReq, opts ...grpc.CallOption) (*SearchOrgReqResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.SearchOrg(ctx, in, opts...)
}

// 查找用户
func (m *defaultOrg) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.SearchUser(ctx, in, opts...)
}

// 用户申请加入团队
func (m *defaultOrg) ApplyJoinOrg(ctx context.Context, in *ApplyJoinOrgReq, opts ...grpc.CallOption) (*ApplyJoinOrgResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.ApplyJoinOrg(ctx, in, opts...)
}

// 邀请用户加入团队
func (m *defaultOrg) InviteJoinOrg(ctx context.Context, in *InviteJoinOrgReq, opts ...grpc.CallOption) (*InviteJoinOrgResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.InviteJoinOrg(ctx, in, opts...)
}

// 同意用户申请加入团队
func (m *defaultOrg) AgreeApplyJoinOrg(ctx context.Context, in *AgreeApplyJoinOrgReq, opts ...grpc.CallOption) (*AgreeApplyJoinOrgResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.AgreeApplyJoinOrg(ctx, in, opts...)
}

// 同意用户邀请加入团队
func (m *defaultOrg) AgreeInviteJoinOrg(ctx context.Context, in *AgreeInviteJoinOrgReq, opts ...grpc.CallOption) (*AgreeInviteJoinOrgResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.AgreeInviteJoinOrg(ctx, in, opts...)
}

// 获取团队角色列表
func (m *defaultOrg) GetOrgRoleList(ctx context.Context, in *OrgRoleListReq, opts ...grpc.CallOption) (*OrgRoleListResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.GetOrgRoleList(ctx, in, opts...)
}

// 获取团队权限列表
func (m *defaultOrg) GetOrgPermList(ctx context.Context, in *OrgPermListReq, opts ...grpc.CallOption) (*OrgPermListResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.GetOrgPermList(ctx, in, opts...)
}

// 创建角色
func (m *defaultOrg) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

// 更新角色
func (m *defaultOrg) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

// 获取团队用户分页列表
func (m *defaultOrg) GetOrgUserPageList(ctx context.Context, in *OrgUserPageListReq, opts ...grpc.CallOption) (*OrgUserPageListResp, error) {
	client := user.NewOrgClient(m.cli.Conn())
	return client.GetOrgUserPageList(ctx, in, opts...)
}
