// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: pb/org.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Org_SearchOrg_FullMethodName          = "/user.Org/searchOrg"
	Org_SearchUser_FullMethodName         = "/user.Org/searchUser"
	Org_ApplyJoinOrg_FullMethodName       = "/user.Org/applyJoinOrg"
	Org_InviteJoinOrg_FullMethodName      = "/user.Org/inviteJoinOrg"
	Org_AgreeApplyJoinOrg_FullMethodName  = "/user.Org/agreeApplyJoinOrg"
	Org_AgreeInviteJoinOrg_FullMethodName = "/user.Org/agreeInviteJoinOrg"
)

// OrgClient is the client API for Org service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 组织团队相关服务
type OrgClient interface {
	// 查找团队
	SearchOrg(ctx context.Context, in *SearchOrgReq, opts ...grpc.CallOption) (*SearchOrgReqResp, error)
	// 查找用户
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	// 用户申请加入团队
	ApplyJoinOrg(ctx context.Context, in *ApplyJoinOrgReq, opts ...grpc.CallOption) (*ApplyJoinOrgResp, error)
	// 邀请用户加入团队
	InviteJoinOrg(ctx context.Context, in *InviteJoinOrgReq, opts ...grpc.CallOption) (*InviteJoinOrgResp, error)
	// 同意用户申请加入团队
	AgreeApplyJoinOrg(ctx context.Context, in *AgreeApplyJoinOrgReq, opts ...grpc.CallOption) (*AgreeApplyJoinOrgResp, error)
	// 同意用户邀请加入团队
	AgreeInviteJoinOrg(ctx context.Context, in *AgreeInviteJoinOrgReq, opts ...grpc.CallOption) (*AgreeInviteJoinOrgResp, error)
}

type orgClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgClient(cc grpc.ClientConnInterface) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) SearchOrg(ctx context.Context, in *SearchOrgReq, opts ...grpc.CallOption) (*SearchOrgReqResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOrgReqResp)
	err := c.cc.Invoke(ctx, Org_SearchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, Org_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ApplyJoinOrg(ctx context.Context, in *ApplyJoinOrgReq, opts ...grpc.CallOption) (*ApplyJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_ApplyJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) InviteJoinOrg(ctx context.Context, in *InviteJoinOrgReq, opts ...grpc.CallOption) (*InviteJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_InviteJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AgreeApplyJoinOrg(ctx context.Context, in *AgreeApplyJoinOrgReq, opts ...grpc.CallOption) (*AgreeApplyJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgreeApplyJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_AgreeApplyJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AgreeInviteJoinOrg(ctx context.Context, in *AgreeInviteJoinOrgReq, opts ...grpc.CallOption) (*AgreeInviteJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgreeInviteJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_AgreeInviteJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServer is the server API for Org service.
// All implementations must embed UnimplementedOrgServer
// for forward compatibility
//
// 组织团队相关服务
type OrgServer interface {
	// 查找团队
	SearchOrg(context.Context, *SearchOrgReq) (*SearchOrgReqResp, error)
	// 查找用户
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	// 用户申请加入团队
	ApplyJoinOrg(context.Context, *ApplyJoinOrgReq) (*ApplyJoinOrgResp, error)
	// 邀请用户加入团队
	InviteJoinOrg(context.Context, *InviteJoinOrgReq) (*InviteJoinOrgResp, error)
	// 同意用户申请加入团队
	AgreeApplyJoinOrg(context.Context, *AgreeApplyJoinOrgReq) (*AgreeApplyJoinOrgResp, error)
	// 同意用户邀请加入团队
	AgreeInviteJoinOrg(context.Context, *AgreeInviteJoinOrgReq) (*AgreeInviteJoinOrgResp, error)
	mustEmbedUnimplementedOrgServer()
}

// UnimplementedOrgServer must be embedded to have forward compatible implementations.
type UnimplementedOrgServer struct {
}

func (UnimplementedOrgServer) SearchOrg(context.Context, *SearchOrgReq) (*SearchOrgReqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrg not implemented")
}
func (UnimplementedOrgServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedOrgServer) ApplyJoinOrg(context.Context, *ApplyJoinOrgReq) (*ApplyJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJoinOrg not implemented")
}
func (UnimplementedOrgServer) InviteJoinOrg(context.Context, *InviteJoinOrgReq) (*InviteJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteJoinOrg not implemented")
}
func (UnimplementedOrgServer) AgreeApplyJoinOrg(context.Context, *AgreeApplyJoinOrgReq) (*AgreeApplyJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeApplyJoinOrg not implemented")
}
func (UnimplementedOrgServer) AgreeInviteJoinOrg(context.Context, *AgreeInviteJoinOrgReq) (*AgreeInviteJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeInviteJoinOrg not implemented")
}
func (UnimplementedOrgServer) mustEmbedUnimplementedOrgServer() {}

// UnsafeOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServer will
// result in compilation errors.
type UnsafeOrgServer interface {
	mustEmbedUnimplementedOrgServer()
}

func RegisterOrgServer(s grpc.ServiceRegistrar, srv OrgServer) {
	s.RegisterService(&Org_ServiceDesc, srv)
}

func _Org_SearchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SearchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SearchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SearchOrg(ctx, req.(*SearchOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ApplyJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ApplyJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ApplyJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ApplyJoinOrg(ctx, req.(*ApplyJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_InviteJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).InviteJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_InviteJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).InviteJoinOrg(ctx, req.(*InviteJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AgreeApplyJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeApplyJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AgreeApplyJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AgreeApplyJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AgreeApplyJoinOrg(ctx, req.(*AgreeApplyJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AgreeInviteJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeInviteJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AgreeInviteJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AgreeInviteJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AgreeInviteJoinOrg(ctx, req.(*AgreeInviteJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Org_ServiceDesc is the grpc.ServiceDesc for Org service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Org_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchOrg",
			Handler:    _Org_SearchOrg_Handler,
		},
		{
			MethodName: "searchUser",
			Handler:    _Org_SearchUser_Handler,
		},
		{
			MethodName: "applyJoinOrg",
			Handler:    _Org_ApplyJoinOrg_Handler,
		},
		{
			MethodName: "inviteJoinOrg",
			Handler:    _Org_InviteJoinOrg_Handler,
		},
		{
			MethodName: "agreeApplyJoinOrg",
			Handler:    _Org_AgreeApplyJoinOrg_Handler,
		},
		{
			MethodName: "agreeInviteJoinOrg",
			Handler:    _Org_AgreeInviteJoinOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/org.proto",
}
