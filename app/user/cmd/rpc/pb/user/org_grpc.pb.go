// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: pb/org.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Org_SearchOrg_FullMethodName                   = "/user.Org/searchOrg"
	Org_SearchUser_FullMethodName                  = "/user.Org/searchUser"
	Org_ApplyJoinOrg_FullMethodName                = "/user.Org/applyJoinOrg"
	Org_InviteJoinOrg_FullMethodName               = "/user.Org/inviteJoinOrg"
	Org_AgreeApplyJoinOrg_FullMethodName           = "/user.Org/agreeApplyJoinOrg"
	Org_AgreeInviteJoinOrg_FullMethodName          = "/user.Org/agreeInviteJoinOrg"
	Org_GetOrgRoleList_FullMethodName              = "/user.Org/getOrgRoleList"
	Org_GetOrgPermList_FullMethodName              = "/user.Org/getOrgPermList"
	Org_CreateRole_FullMethodName                  = "/user.Org/createRole"
	Org_UpdateRole_FullMethodName                  = "/user.Org/updateRole"
	Org_GetOrgUserList_FullMethodName              = "/user.Org/getOrgUserList"
	Org_GetOrgUserPageList_FullMethodName          = "/user.Org/getOrgUserPageList"
	Org_ChangeUserRole_FullMethodName              = "/user.Org/changeUserRole"
	Org_DeleteUser_FullMethodName                  = "/user.Org/deleteUser"
	Org_PauseUser_FullMethodName                   = "/user.Org/pauseUser"
	Org_ResumeUser_FullMethodName                  = "/user.Org/resumeUser"
	Org_GivePower_FullMethodName                   = "/user.Org/givePower"
	Org_GivePowerAvg_FullMethodName                = "/user.Org/givePowerAvg"
	Org_GivePowerShop_FullMethodName               = "/user.Org/givePowerShop"
	Org_GivePowerShopAvg_FullMethodName            = "/user.Org/givePowerShopAvg"
	Org_GetOrgShopPageList_FullMethodName          = "/user.Org/getOrgShopPageList"
	Org_UpdateShopAssign_FullMethodName            = "/user.Org/updateShopAssign"
	Org_GetOrgUserOperationPageList_FullMethodName = "/user.Org/getOrgUserOperationPageList"
	Org_GetOrgUserOperationList_FullMethodName     = "/user.Org/getOrgUserOperationList"
)

// OrgClient is the client API for Org service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 组织团队相关服务
type OrgClient interface {
	// 查找团队
	SearchOrg(ctx context.Context, in *SearchOrgReq, opts ...grpc.CallOption) (*SearchOrgReqResp, error)
	// 查找用户
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	// 用户申请加入团队
	ApplyJoinOrg(ctx context.Context, in *ApplyJoinOrgReq, opts ...grpc.CallOption) (*ApplyJoinOrgResp, error)
	// 邀请用户加入团队
	InviteJoinOrg(ctx context.Context, in *InviteJoinOrgReq, opts ...grpc.CallOption) (*InviteJoinOrgResp, error)
	// 同意用户申请加入团队
	AgreeApplyJoinOrg(ctx context.Context, in *AgreeApplyJoinOrgReq, opts ...grpc.CallOption) (*AgreeApplyJoinOrgResp, error)
	// 同意用户邀请加入团队
	AgreeInviteJoinOrg(ctx context.Context, in *AgreeInviteJoinOrgReq, opts ...grpc.CallOption) (*AgreeInviteJoinOrgResp, error)
	// 获取团队角色列表
	GetOrgRoleList(ctx context.Context, in *OrgRoleListReq, opts ...grpc.CallOption) (*OrgRoleListResp, error)
	// 获取团队权限列表
	GetOrgPermList(ctx context.Context, in *OrgPermListReq, opts ...grpc.CallOption) (*OrgPermListResp, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	// 获取团队用户列表
	GetOrgUserList(ctx context.Context, in *OrgUserListReq, opts ...grpc.CallOption) (*OrgUserListResp, error)
	// 获取团队用户分页列表
	GetOrgUserPageList(ctx context.Context, in *OrgUserPageListReq, opts ...grpc.CallOption) (*OrgUserPageListResp, error)
	// 修改用户角色
	ChangeUserRole(ctx context.Context, in *ChangeUserRoleReq, opts ...grpc.CallOption) (*ChangeUserRoleResp, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	// 暂停用户
	PauseUser(ctx context.Context, in *PauseUserReq, opts ...grpc.CallOption) (*PauseUserResp, error)
	// 恢复用户
	ResumeUser(ctx context.Context, in *ResumeUserReq, opts ...grpc.CallOption) (*ResumeUserResp, error)
	// 分配算力
	GivePower(ctx context.Context, in *GivePowerReq, opts ...grpc.CallOption) (*GivePowerResp, error)
	// 平均分配算力
	GivePowerAvg(ctx context.Context, in *GivePowerAvgReq, opts ...grpc.CallOption) (*GivePowerAvgResp, error)
	// 分配店铺算力
	GivePowerShop(ctx context.Context, in *GivePowerShopReq, opts ...grpc.CallOption) (*GivePowerShopResp, error)
	// 平均分配店铺算力
	GivePowerShopAvg(ctx context.Context, in *GivePowerShopAvgReq, opts ...grpc.CallOption) (*GivePowerShopAvgResp, error)
	// 获取团队店铺分页列表
	GetOrgShopPageList(ctx context.Context, in *OrgShopPageListReq, opts ...grpc.CallOption) (*OrgShopPageListResp, error)
	// 编辑店铺指派
	UpdateShopAssign(ctx context.Context, in *UpdateShopAssignReq, opts ...grpc.CallOption) (*UpdateShopAssignResp, error)
	// 获取组织用户操作记录分页列表
	GetOrgUserOperationPageList(ctx context.Context, in *OrgUserOperationPageListReq, opts ...grpc.CallOption) (*OrgUserOperationPageListResp, error)
	// 获取组织用户操作记录列表
	GetOrgUserOperationList(ctx context.Context, in *OrgUserOperationListReq, opts ...grpc.CallOption) (*OrgUserOperationListResp, error)
}

type orgClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgClient(cc grpc.ClientConnInterface) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) SearchOrg(ctx context.Context, in *SearchOrgReq, opts ...grpc.CallOption) (*SearchOrgReqResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOrgReqResp)
	err := c.cc.Invoke(ctx, Org_SearchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, Org_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ApplyJoinOrg(ctx context.Context, in *ApplyJoinOrgReq, opts ...grpc.CallOption) (*ApplyJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_ApplyJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) InviteJoinOrg(ctx context.Context, in *InviteJoinOrgReq, opts ...grpc.CallOption) (*InviteJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_InviteJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AgreeApplyJoinOrg(ctx context.Context, in *AgreeApplyJoinOrgReq, opts ...grpc.CallOption) (*AgreeApplyJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgreeApplyJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_AgreeApplyJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AgreeInviteJoinOrg(ctx context.Context, in *AgreeInviteJoinOrgReq, opts ...grpc.CallOption) (*AgreeInviteJoinOrgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgreeInviteJoinOrgResp)
	err := c.cc.Invoke(ctx, Org_AgreeInviteJoinOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgRoleList(ctx context.Context, in *OrgRoleListReq, opts ...grpc.CallOption) (*OrgRoleListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgRoleListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgPermList(ctx context.Context, in *OrgPermListReq, opts ...grpc.CallOption) (*OrgPermListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgPermListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgPermList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResp)
	err := c.cc.Invoke(ctx, Org_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, Org_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgUserList(ctx context.Context, in *OrgUserListReq, opts ...grpc.CallOption) (*OrgUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUserListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgUserPageList(ctx context.Context, in *OrgUserPageListReq, opts ...grpc.CallOption) (*OrgUserPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUserPageListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgUserPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ChangeUserRole(ctx context.Context, in *ChangeUserRoleReq, opts ...grpc.CallOption) (*ChangeUserRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserRoleResp)
	err := c.cc.Invoke(ctx, Org_ChangeUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, Org_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) PauseUser(ctx context.Context, in *PauseUserReq, opts ...grpc.CallOption) (*PauseUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseUserResp)
	err := c.cc.Invoke(ctx, Org_PauseUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ResumeUser(ctx context.Context, in *ResumeUserReq, opts ...grpc.CallOption) (*ResumeUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeUserResp)
	err := c.cc.Invoke(ctx, Org_ResumeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GivePower(ctx context.Context, in *GivePowerReq, opts ...grpc.CallOption) (*GivePowerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GivePowerResp)
	err := c.cc.Invoke(ctx, Org_GivePower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GivePowerAvg(ctx context.Context, in *GivePowerAvgReq, opts ...grpc.CallOption) (*GivePowerAvgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GivePowerAvgResp)
	err := c.cc.Invoke(ctx, Org_GivePowerAvg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GivePowerShop(ctx context.Context, in *GivePowerShopReq, opts ...grpc.CallOption) (*GivePowerShopResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GivePowerShopResp)
	err := c.cc.Invoke(ctx, Org_GivePowerShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GivePowerShopAvg(ctx context.Context, in *GivePowerShopAvgReq, opts ...grpc.CallOption) (*GivePowerShopAvgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GivePowerShopAvgResp)
	err := c.cc.Invoke(ctx, Org_GivePowerShopAvg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgShopPageList(ctx context.Context, in *OrgShopPageListReq, opts ...grpc.CallOption) (*OrgShopPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgShopPageListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgShopPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateShopAssign(ctx context.Context, in *UpdateShopAssignReq, opts ...grpc.CallOption) (*UpdateShopAssignResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShopAssignResp)
	err := c.cc.Invoke(ctx, Org_UpdateShopAssign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgUserOperationPageList(ctx context.Context, in *OrgUserOperationPageListReq, opts ...grpc.CallOption) (*OrgUserOperationPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUserOperationPageListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgUserOperationPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgUserOperationList(ctx context.Context, in *OrgUserOperationListReq, opts ...grpc.CallOption) (*OrgUserOperationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrgUserOperationListResp)
	err := c.cc.Invoke(ctx, Org_GetOrgUserOperationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServer is the server API for Org service.
// All implementations must embed UnimplementedOrgServer
// for forward compatibility
//
// 组织团队相关服务
type OrgServer interface {
	// 查找团队
	SearchOrg(context.Context, *SearchOrgReq) (*SearchOrgReqResp, error)
	// 查找用户
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	// 用户申请加入团队
	ApplyJoinOrg(context.Context, *ApplyJoinOrgReq) (*ApplyJoinOrgResp, error)
	// 邀请用户加入团队
	InviteJoinOrg(context.Context, *InviteJoinOrgReq) (*InviteJoinOrgResp, error)
	// 同意用户申请加入团队
	AgreeApplyJoinOrg(context.Context, *AgreeApplyJoinOrgReq) (*AgreeApplyJoinOrgResp, error)
	// 同意用户邀请加入团队
	AgreeInviteJoinOrg(context.Context, *AgreeInviteJoinOrgReq) (*AgreeInviteJoinOrgResp, error)
	// 获取团队角色列表
	GetOrgRoleList(context.Context, *OrgRoleListReq) (*OrgRoleListResp, error)
	// 获取团队权限列表
	GetOrgPermList(context.Context, *OrgPermListReq) (*OrgPermListResp, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	// 更新角色
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	// 获取团队用户列表
	GetOrgUserList(context.Context, *OrgUserListReq) (*OrgUserListResp, error)
	// 获取团队用户分页列表
	GetOrgUserPageList(context.Context, *OrgUserPageListReq) (*OrgUserPageListResp, error)
	// 修改用户角色
	ChangeUserRole(context.Context, *ChangeUserRoleReq) (*ChangeUserRoleResp, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	// 暂停用户
	PauseUser(context.Context, *PauseUserReq) (*PauseUserResp, error)
	// 恢复用户
	ResumeUser(context.Context, *ResumeUserReq) (*ResumeUserResp, error)
	// 分配算力
	GivePower(context.Context, *GivePowerReq) (*GivePowerResp, error)
	// 平均分配算力
	GivePowerAvg(context.Context, *GivePowerAvgReq) (*GivePowerAvgResp, error)
	// 分配店铺算力
	GivePowerShop(context.Context, *GivePowerShopReq) (*GivePowerShopResp, error)
	// 平均分配店铺算力
	GivePowerShopAvg(context.Context, *GivePowerShopAvgReq) (*GivePowerShopAvgResp, error)
	// 获取团队店铺分页列表
	GetOrgShopPageList(context.Context, *OrgShopPageListReq) (*OrgShopPageListResp, error)
	// 编辑店铺指派
	UpdateShopAssign(context.Context, *UpdateShopAssignReq) (*UpdateShopAssignResp, error)
	// 获取组织用户操作记录分页列表
	GetOrgUserOperationPageList(context.Context, *OrgUserOperationPageListReq) (*OrgUserOperationPageListResp, error)
	// 获取组织用户操作记录列表
	GetOrgUserOperationList(context.Context, *OrgUserOperationListReq) (*OrgUserOperationListResp, error)
	mustEmbedUnimplementedOrgServer()
}

// UnimplementedOrgServer must be embedded to have forward compatible implementations.
type UnimplementedOrgServer struct {
}

func (UnimplementedOrgServer) SearchOrg(context.Context, *SearchOrgReq) (*SearchOrgReqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrg not implemented")
}
func (UnimplementedOrgServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedOrgServer) ApplyJoinOrg(context.Context, *ApplyJoinOrgReq) (*ApplyJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJoinOrg not implemented")
}
func (UnimplementedOrgServer) InviteJoinOrg(context.Context, *InviteJoinOrgReq) (*InviteJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteJoinOrg not implemented")
}
func (UnimplementedOrgServer) AgreeApplyJoinOrg(context.Context, *AgreeApplyJoinOrgReq) (*AgreeApplyJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeApplyJoinOrg not implemented")
}
func (UnimplementedOrgServer) AgreeInviteJoinOrg(context.Context, *AgreeInviteJoinOrgReq) (*AgreeInviteJoinOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeInviteJoinOrg not implemented")
}
func (UnimplementedOrgServer) GetOrgRoleList(context.Context, *OrgRoleListReq) (*OrgRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgRoleList not implemented")
}
func (UnimplementedOrgServer) GetOrgPermList(context.Context, *OrgPermListReq) (*OrgPermListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgPermList not implemented")
}
func (UnimplementedOrgServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedOrgServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedOrgServer) GetOrgUserList(context.Context, *OrgUserListReq) (*OrgUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUserList not implemented")
}
func (UnimplementedOrgServer) GetOrgUserPageList(context.Context, *OrgUserPageListReq) (*OrgUserPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUserPageList not implemented")
}
func (UnimplementedOrgServer) ChangeUserRole(context.Context, *ChangeUserRoleReq) (*ChangeUserRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserRole not implemented")
}
func (UnimplementedOrgServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedOrgServer) PauseUser(context.Context, *PauseUserReq) (*PauseUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseUser not implemented")
}
func (UnimplementedOrgServer) ResumeUser(context.Context, *ResumeUserReq) (*ResumeUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeUser not implemented")
}
func (UnimplementedOrgServer) GivePower(context.Context, *GivePowerReq) (*GivePowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GivePower not implemented")
}
func (UnimplementedOrgServer) GivePowerAvg(context.Context, *GivePowerAvgReq) (*GivePowerAvgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GivePowerAvg not implemented")
}
func (UnimplementedOrgServer) GivePowerShop(context.Context, *GivePowerShopReq) (*GivePowerShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GivePowerShop not implemented")
}
func (UnimplementedOrgServer) GivePowerShopAvg(context.Context, *GivePowerShopAvgReq) (*GivePowerShopAvgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GivePowerShopAvg not implemented")
}
func (UnimplementedOrgServer) GetOrgShopPageList(context.Context, *OrgShopPageListReq) (*OrgShopPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgShopPageList not implemented")
}
func (UnimplementedOrgServer) UpdateShopAssign(context.Context, *UpdateShopAssignReq) (*UpdateShopAssignResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShopAssign not implemented")
}
func (UnimplementedOrgServer) GetOrgUserOperationPageList(context.Context, *OrgUserOperationPageListReq) (*OrgUserOperationPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUserOperationPageList not implemented")
}
func (UnimplementedOrgServer) GetOrgUserOperationList(context.Context, *OrgUserOperationListReq) (*OrgUserOperationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUserOperationList not implemented")
}
func (UnimplementedOrgServer) mustEmbedUnimplementedOrgServer() {}

// UnsafeOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServer will
// result in compilation errors.
type UnsafeOrgServer interface {
	mustEmbedUnimplementedOrgServer()
}

func RegisterOrgServer(s grpc.ServiceRegistrar, srv OrgServer) {
	s.RegisterService(&Org_ServiceDesc, srv)
}

func _Org_SearchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SearchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SearchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SearchOrg(ctx, req.(*SearchOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ApplyJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ApplyJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ApplyJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ApplyJoinOrg(ctx, req.(*ApplyJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_InviteJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).InviteJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_InviteJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).InviteJoinOrg(ctx, req.(*InviteJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AgreeApplyJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeApplyJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AgreeApplyJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AgreeApplyJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AgreeApplyJoinOrg(ctx, req.(*AgreeApplyJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AgreeInviteJoinOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeInviteJoinOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AgreeInviteJoinOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AgreeInviteJoinOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AgreeInviteJoinOrg(ctx, req.(*AgreeInviteJoinOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgRoleList(ctx, req.(*OrgRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgPermList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgPermListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgPermList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgPermList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgPermList(ctx, req.(*OrgPermListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgUserList(ctx, req.(*OrgUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgUserPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUserPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgUserPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgUserPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgUserPageList(ctx, req.(*OrgUserPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ChangeUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ChangeUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ChangeUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ChangeUserRole(ctx, req.(*ChangeUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_PauseUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).PauseUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_PauseUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).PauseUser(ctx, req.(*PauseUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ResumeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ResumeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ResumeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ResumeUser(ctx, req.(*ResumeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GivePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GivePowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GivePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GivePower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GivePower(ctx, req.(*GivePowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GivePowerAvg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GivePowerAvgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GivePowerAvg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GivePowerAvg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GivePowerAvg(ctx, req.(*GivePowerAvgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GivePowerShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GivePowerShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GivePowerShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GivePowerShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GivePowerShop(ctx, req.(*GivePowerShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GivePowerShopAvg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GivePowerShopAvgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GivePowerShopAvg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GivePowerShopAvg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GivePowerShopAvg(ctx, req.(*GivePowerShopAvgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgShopPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgShopPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgShopPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgShopPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgShopPageList(ctx, req.(*OrgShopPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateShopAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopAssignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateShopAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateShopAssign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateShopAssign(ctx, req.(*UpdateShopAssignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgUserOperationPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUserOperationPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgUserOperationPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgUserOperationPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgUserOperationPageList(ctx, req.(*OrgUserOperationPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgUserOperationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUserOperationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgUserOperationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgUserOperationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgUserOperationList(ctx, req.(*OrgUserOperationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Org_ServiceDesc is the grpc.ServiceDesc for Org service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Org_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchOrg",
			Handler:    _Org_SearchOrg_Handler,
		},
		{
			MethodName: "searchUser",
			Handler:    _Org_SearchUser_Handler,
		},
		{
			MethodName: "applyJoinOrg",
			Handler:    _Org_ApplyJoinOrg_Handler,
		},
		{
			MethodName: "inviteJoinOrg",
			Handler:    _Org_InviteJoinOrg_Handler,
		},
		{
			MethodName: "agreeApplyJoinOrg",
			Handler:    _Org_AgreeApplyJoinOrg_Handler,
		},
		{
			MethodName: "agreeInviteJoinOrg",
			Handler:    _Org_AgreeInviteJoinOrg_Handler,
		},
		{
			MethodName: "getOrgRoleList",
			Handler:    _Org_GetOrgRoleList_Handler,
		},
		{
			MethodName: "getOrgPermList",
			Handler:    _Org_GetOrgPermList_Handler,
		},
		{
			MethodName: "createRole",
			Handler:    _Org_CreateRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _Org_UpdateRole_Handler,
		},
		{
			MethodName: "getOrgUserList",
			Handler:    _Org_GetOrgUserList_Handler,
		},
		{
			MethodName: "getOrgUserPageList",
			Handler:    _Org_GetOrgUserPageList_Handler,
		},
		{
			MethodName: "changeUserRole",
			Handler:    _Org_ChangeUserRole_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _Org_DeleteUser_Handler,
		},
		{
			MethodName: "pauseUser",
			Handler:    _Org_PauseUser_Handler,
		},
		{
			MethodName: "resumeUser",
			Handler:    _Org_ResumeUser_Handler,
		},
		{
			MethodName: "givePower",
			Handler:    _Org_GivePower_Handler,
		},
		{
			MethodName: "givePowerAvg",
			Handler:    _Org_GivePowerAvg_Handler,
		},
		{
			MethodName: "givePowerShop",
			Handler:    _Org_GivePowerShop_Handler,
		},
		{
			MethodName: "givePowerShopAvg",
			Handler:    _Org_GivePowerShopAvg_Handler,
		},
		{
			MethodName: "getOrgShopPageList",
			Handler:    _Org_GetOrgShopPageList_Handler,
		},
		{
			MethodName: "updateShopAssign",
			Handler:    _Org_UpdateShopAssign_Handler,
		},
		{
			MethodName: "getOrgUserOperationPageList",
			Handler:    _Org_GetOrgUserOperationPageList_Handler,
		},
		{
			MethodName: "getOrgUserOperationList",
			Handler:    _Org_GetOrgUserOperationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/org.proto",
}
