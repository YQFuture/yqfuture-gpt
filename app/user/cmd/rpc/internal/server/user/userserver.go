// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"yufuture-gpt/app/user/cmd/rpc/internal/logic/user"
	"yufuture-gpt/app/user/cmd/rpc/internal/svc"
	"yufuture-gpt/app/user/cmd/rpc/pb/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 获取当前登录用户数据
func (s *UserServer) GetCurrentUserData(ctx context.Context, in *user.CurrentUserDataReq) (*user.CurrentUserDataResp, error) {
	l := userlogic.NewGetCurrentUserDataLogic(ctx, s.svcCtx)
	return l.GetCurrentUserData(in)
}

// 绑定手机号
func (s *UserServer) BindPhone(ctx context.Context, in *user.BindPhoneReq) (*user.BindPhoneResp, error) {
	l := userlogic.NewBindPhoneLogic(ctx, s.svcCtx)
	return l.BindPhone(in)
}

// 获取用户组织列表
func (s *UserServer) GetOrgList(ctx context.Context, in *user.OrgListReq) (*user.OrgListResp, error) {
	l := userlogic.NewGetOrgListLogic(ctx, s.svcCtx)
	return l.GetOrgList(in)
}

// 切换组织
func (s *UserServer) ChangeOrg(ctx context.Context, in *user.ChangeOrgReq) (*user.ChangeOrgResp, error) {
	l := userlogic.NewChangeOrgLogic(ctx, s.svcCtx)
	return l.ChangeOrg(in)
}

// 更新组织名称
func (s *UserServer) UpdateOrgName(ctx context.Context, in *user.UpdateOrgNameReq) (*user.UpdateOrgNameResp, error) {
	l := userlogic.NewUpdateOrgNameLogic(ctx, s.svcCtx)
	return l.UpdateOrgName(in)
}

// 更新头像
func (s *UserServer) UpdateHeadImg(ctx context.Context, in *user.UpdateHeadImgReq) (*user.UpdateHeadImgResp, error) {
	l := userlogic.NewUpdateHeadImgLogic(ctx, s.svcCtx)
	return l.UpdateHeadImg(in)
}

// 更新昵称
func (s *UserServer) UpdateNickName(ctx context.Context, in *user.UpdateNickNameReq) (*user.UpdateNickNameResp, error) {
	l := userlogic.NewUpdateNickNameLogic(ctx, s.svcCtx)
	return l.UpdateNickName(in)
}

// 获取消息列表
func (s *UserServer) GetMessageList(ctx context.Context, in *user.MessageListReq) (*user.MessageListResp, error) {
	l := userlogic.NewGetMessageListLogic(ctx, s.svcCtx)
	return l.GetMessageList(in)
}

// 忽略消息
func (s *UserServer) IgnoreMessage(ctx context.Context, in *user.IgnoreMessageReq) (*user.IgnoreMessageResp, error) {
	l := userlogic.NewIgnoreMessageLogic(ctx, s.svcCtx)
	return l.IgnoreMessage(in)
}
