// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsMessageFieldNames          = builder.RawFieldNames(&BsMessage{})
	bsMessageRows                = strings.Join(bsMessageFieldNames, ",")
	bsMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(bsMessageFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(bsMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsMessageModel interface {
		Insert(ctx context.Context, data *BsMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsMessage, error)
		Update(ctx context.Context, data *BsMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsMessage struct {
		Id          int64     `db:"id"`           // 消息ID
		UserId      int64     `db:"user_id"`      // 用户ID
		OrgId       int64     `db:"org_id"`       // 组织ID
		MessageType int64     `db:"message_type"` // 消息类型 0: 个人消息 1: 全员公告
		ContentId   int64     `db:"content_id"`   // 消息内容ID
		ReadFlag    int64     `db:"read_flag"`    // 已读标记 0: 未读 1: 已读
		DealFlag    int64     `db:"deal_flag"`    // 处理标记 0: 未处理 1: 已处理
		IgnoreFlag  int64     `db:"ignore_flag"`  // 忽略标记 0: 未忽略 1: 已忽略
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 修改时间
		CreateBy    int64     `db:"create_by"`    // 创建人
		UpdateBy    int64     `db:"update_by"`    // 修改人
	}
)

func newBsMessageModel(conn sqlx.SqlConn) *defaultBsMessageModel {
	return &defaultBsMessageModel{
		conn:  conn,
		table: "`bs_message`",
	}
}

func (m *defaultBsMessageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsMessageModel) FindOne(ctx context.Context, id int64) (*BsMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsMessageRows, m.table)
	var resp BsMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsMessageModel) Insert(ctx context.Context, data *BsMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.OrgId, data.MessageType, data.ContentId, data.ReadFlag, data.DealFlag, data.IgnoreFlag, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsMessageModel) Update(ctx context.Context, data *BsMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.MessageType, data.ContentId, data.ReadFlag, data.DealFlag, data.IgnoreFlag, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultBsMessageModel) tableName() string {
	return m.table
}
