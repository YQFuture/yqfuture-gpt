// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsUserFieldNames          = builder.RawFieldNames(&BsUser{})
	bsUserRows                = strings.Join(bsUserFieldNames, ",")
	bsUserRowsExpectAutoSet   = strings.Join(stringx.Remove(bsUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsUserRowsWithPlaceHolder = strings.Join(stringx.Remove(bsUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsUserModel interface {
		Insert(ctx context.Context, data *BsUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsUser, error)
		Update(ctx context.Context, data *BsUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsUser struct {
		Id         int64          `db:"id"`          // 用户ID
		NowOrgId   int64          `db:"now_org_id"`  // 当前组织ID
		UserName   sql.NullString `db:"user_name"`   // 用户名
		NickName   sql.NullString `db:"nick_name"`   // 用户昵称
		HeadImg    sql.NullString `db:"head_img"`    // 头像地址
		Phone      sql.NullString `db:"phone"`       // 手机号码
		Password   sql.NullString `db:"password"`    // 密码
		Openid     sql.NullString `db:"openid"`      // openid是微信用户在不同类型的产品的身份ID
		Unionid    sql.NullString `db:"unionid"`     // unionid是微信用户在同一个开放平台下的产品的身份ID
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
		CreateBy   int64          `db:"create_by"`   // 创建人
		UpdateBy   int64          `db:"update_by"`   // 修改人
	}
)

func newBsUserModel(conn sqlx.SqlConn) *defaultBsUserModel {
	return &defaultBsUserModel{
		conn:  conn,
		table: "`bs_user`",
	}
}

func (m *defaultBsUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsUserModel) FindOne(ctx context.Context, id int64) (*BsUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsUserRows, m.table)
	var resp BsUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsUserModel) Insert(ctx context.Context, data *BsUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.NowOrgId, data.UserName, data.NickName, data.HeadImg, data.Phone, data.Password, data.Openid, data.Unionid, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsUserModel) Update(ctx context.Context, data *BsUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.NowOrgId, data.UserName, data.NickName, data.HeadImg, data.Phone, data.Password, data.Openid, data.Unionid, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultBsUserModel) tableName() string {
	return m.table
}
