// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsShopFieldNames          = builder.RawFieldNames(&BsShop{})
	bsShopRows                = strings.Join(bsShopFieldNames, ",")
	bsShopRowsExpectAutoSet   = strings.Join(stringx.Remove(bsShopFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsShopRowsWithPlaceHolder = strings.Join(stringx.Remove(bsShopFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsShopModel interface {
		Insert(ctx context.Context, data *BsShop) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsShop, error)
		Update(ctx context.Context, data *BsShop) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsShopModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsShop struct {
		Id              int64          `db:"id"`                // 店铺ID
		PlatformType    int64          `db:"platform_type"`     // 平台类型 0: 未知 1: 京东 2: 拼多多 3: 千牛
		PlatformId      string         `db:"platform_id"`       // 平台店铺ID
		ShopName        string         `db:"shop_name"`         // 店铺名称
		MongoDataId     sql.NullString `db:"mongo_data_id"`     // MongoDB中对应的数据文档ID
		OrgId           int64          `db:"org_id"`            // 组织ID
		UserId          sql.NullInt64  `db:"user_id"`           // 用户ID 兼容原有系统所设
		Uuid            sql.NullString `db:"uuid"`              // UUID 兼容原有系统所设
		MonthPowerLimit int64          `db:"month_power_limit"` // 当月算力上限 -1 无限制
		MonthUsedPower  int64          `db:"month_used_power"`  // 当月已用算力
		CreateTime      time.Time      `db:"create_time"`       // 创建时间
		UpdateTime      time.Time      `db:"update_time"`       // 修改时间
		CreateBy        int64          `db:"create_by"`         // 创建人
		UpdateBy        int64          `db:"update_by"`         // 修改人
	}
)

func newBsShopModel(conn sqlx.SqlConn) *defaultBsShopModel {
	return &defaultBsShopModel{
		conn:  conn,
		table: "`bs_shop`",
	}
}

func (m *defaultBsShopModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsShopModel) FindOne(ctx context.Context, id int64) (*BsShop, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsShopRows, m.table)
	var resp BsShop
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsShopModel) Insert(ctx context.Context, data *BsShop) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsShopRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.PlatformType, data.PlatformId, data.ShopName, data.MongoDataId, data.OrgId, data.UserId, data.Uuid, data.MonthPowerLimit, data.MonthUsedPower, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsShopModel) Update(ctx context.Context, data *BsShop) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsShopRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PlatformType, data.PlatformId, data.ShopName, data.MongoDataId, data.OrgId, data.UserId, data.Uuid, data.MonthPowerLimit, data.MonthUsedPower, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultBsShopModel) tableName() string {
	return m.table
}
