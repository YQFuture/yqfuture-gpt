// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsMessageContentFieldNames          = builder.RawFieldNames(&BsMessageContent{})
	bsMessageContentRows                = strings.Join(bsMessageContentFieldNames, ",")
	bsMessageContentRowsExpectAutoSet   = strings.Join(stringx.Remove(bsMessageContentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsMessageContentRowsWithPlaceHolder = strings.Join(stringx.Remove(bsMessageContentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsMessageContentModel interface {
		Insert(ctx context.Context, data *BsMessageContent) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsMessageContent, error)
		Update(ctx context.Context, data *BsMessageContent) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsMessageContentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsMessageContent struct {
		Id                 int64     `db:"id"`                   // 消息内容ID
		MessageType        int64     `db:"message_type"`         // 消息类型 0: 个人消息 1: 全员公告
		MessageContentType int64     `db:"message_content_type"` // 消息内容类型 0: 文字 1: 图文 2: 图片 3: 邀请加入组织 4: 申请加入组织 5: 平台掉线 6: 算力不足 7: 转接失败
		MessageContent     string    `db:"message_content"`      // 消息内容
		CreateTime         time.Time `db:"create_time"`          // 创建时间
		UpdateTime         time.Time `db:"update_time"`          // 修改时间
		CreateBy           int64     `db:"create_by"`            // 创建人
		UpdateBy           int64     `db:"update_by"`            // 修改人
	}
)

func newBsMessageContentModel(conn sqlx.SqlConn) *defaultBsMessageContentModel {
	return &defaultBsMessageContentModel{
		conn:  conn,
		table: "`bs_message_content`",
	}
}

func (m *defaultBsMessageContentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsMessageContentModel) FindOne(ctx context.Context, id int64) (*BsMessageContent, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsMessageContentRows, m.table)
	var resp BsMessageContent
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsMessageContentModel) Insert(ctx context.Context, data *BsMessageContent) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, bsMessageContentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.MessageType, data.MessageContentType, data.MessageContent, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsMessageContentModel) Update(ctx context.Context, data *BsMessageContent) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsMessageContentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MessageType, data.MessageContentType, data.MessageContent, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultBsMessageContentModel) tableName() string {
	return m.table
}
