// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsUserOrgFieldNames          = builder.RawFieldNames(&BsUserOrg{})
	bsUserOrgRows                = strings.Join(bsUserOrgFieldNames, ",")
	bsUserOrgRowsExpectAutoSet   = strings.Join(stringx.Remove(bsUserOrgFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsUserOrgRowsWithPlaceHolder = strings.Join(stringx.Remove(bsUserOrgFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsUserOrgModel interface {
		Insert(ctx context.Context, data *BsUserOrg) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsUserOrg, error)
		Update(ctx context.Context, data *BsUserOrg) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsUserOrgModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsUserOrg struct {
		Id     int64 `db:"id"`      // ID
		UserId int64 `db:"user_id"` // 用户ID
		OrgId  int64 `db:"org_id"`  // 所有者ID
	}
)

func newBsUserOrgModel(conn sqlx.SqlConn) *defaultBsUserOrgModel {
	return &defaultBsUserOrgModel{
		conn:  conn,
		table: "`bs_user_org`",
	}
}

func (m *defaultBsUserOrgModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsUserOrgModel) FindOne(ctx context.Context, id int64) (*BsUserOrg, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsUserOrgRows, m.table)
	var resp BsUserOrg
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsUserOrgModel) Insert(ctx context.Context, data *BsUserOrg) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, bsUserOrgRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId)
	return ret, err
}

func (m *defaultBsUserOrgModel) Update(ctx context.Context, data *BsUserOrg) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsUserOrgRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.Id)
	return err
}

func (m *defaultBsUserOrgModel) tableName() string {
	return m.table
}
