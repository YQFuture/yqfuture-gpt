// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsPermTemplateFieldNames          = builder.RawFieldNames(&BsPermTemplate{})
	bsPermTemplateRows                = strings.Join(bsPermTemplateFieldNames, ",")
	bsPermTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(bsPermTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsPermTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(bsPermTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsPermTemplateModel interface {
		Insert(ctx context.Context, data *BsPermTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsPermTemplate, error)
		FindOneByPerm(ctx context.Context, perm string) (*BsPermTemplate, error)
		Update(ctx context.Context, data *BsPermTemplate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsPermTemplateModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsPermTemplate struct {
		Id         int64          `db:"id"`          // 模板ID
		ParentId   int64          `db:"parent_id"`   // 父权限ID
		Name       string         `db:"name"`        // 权限名称
		Perm       string         `db:"perm"`        // 权限标识
		Url        sql.NullString `db:"url"`         // 接口URL
		VuePath    sql.NullString `db:"vue_path"`    // 前端VUE系统的PATH
		BundleType int64          `db:"bundle_type"` // 套餐类型 0: 免费版 1: 基础版 2: AI个人版 3: AI协作版
		EnableFlag int64          `db:"enable_flag"` // 启用标志 0: 未启用 1: 启用
		Sort       int64          `db:"sort"`        // 排序字段
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
		CreateBy   int64          `db:"create_by"`   // 创建人
		UpdateBy   int64          `db:"update_by"`   // 修改人
	}
)

func newBsPermTemplateModel(conn sqlx.SqlConn) *defaultBsPermTemplateModel {
	return &defaultBsPermTemplateModel{
		conn:  conn,
		table: "`bs_perm_template`",
	}
}

func (m *defaultBsPermTemplateModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsPermTemplateModel) FindOne(ctx context.Context, id int64) (*BsPermTemplate, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsPermTemplateRows, m.table)
	var resp BsPermTemplate
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsPermTemplateModel) FindOneByPerm(ctx context.Context, perm string) (*BsPermTemplate, error) {
	var resp BsPermTemplate
	query := fmt.Sprintf("select %s from %s where `perm` = ? limit 1", bsPermTemplateRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, perm)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsPermTemplateModel) Insert(ctx context.Context, data *BsPermTemplate) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsPermTemplateRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Perm, data.Url, data.VuePath, data.BundleType, data.EnableFlag, data.Sort, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsPermTemplateModel) Update(ctx context.Context, newData *BsPermTemplate) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsPermTemplateRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Perm, newData.Url, newData.VuePath, newData.BundleType, newData.EnableFlag, newData.Sort, newData.CreateBy, newData.UpdateBy, newData.Id)
	return err
}

func (m *defaultBsPermTemplateModel) tableName() string {
	return m.table
}
