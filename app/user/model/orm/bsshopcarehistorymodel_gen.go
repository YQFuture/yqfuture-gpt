// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsShopCareHistoryFieldNames          = builder.RawFieldNames(&BsShopCareHistory{})
	bsShopCareHistoryRows                = strings.Join(bsShopCareHistoryFieldNames, ",")
	bsShopCareHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(bsShopCareHistoryFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsShopCareHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(bsShopCareHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsShopCareHistoryModel interface {
		Insert(ctx context.Context, data *BsShopCareHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsShopCareHistory, error)
		Update(ctx context.Context, data *BsShopCareHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsShopCareHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsShopCareHistory struct {
		Id         int64     `db:"id"`          // ID
		ShopId     int64     `db:"shop_id"`     // 店铺ID
		OrgId      int64     `db:"org_id"`      // 组织ID
		UserId     int64     `db:"user_id"`     // 用户ID
		UsedPower  int64     `db:"used_power"`  // 算力消耗
		CareTime   int64     `db:"care_time"`   // 托管时长
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
		CreateBy   int64     `db:"create_by"`   // 创建人
		UpdateBy   int64     `db:"update_by"`   // 修改人
	}
)

func newBsShopCareHistoryModel(conn sqlx.SqlConn) *defaultBsShopCareHistoryModel {
	return &defaultBsShopCareHistoryModel{
		conn:  conn,
		table: "`bs_shop_care_history`",
	}
}

func (m *defaultBsShopCareHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsShopCareHistoryModel) FindOne(ctx context.Context, id int64) (*BsShopCareHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsShopCareHistoryRows, m.table)
	var resp BsShopCareHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsShopCareHistoryModel) Insert(ctx context.Context, data *BsShopCareHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsShopCareHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ShopId, data.OrgId, data.UserId, data.UsedPower, data.CareTime, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsShopCareHistoryModel) Update(ctx context.Context, data *BsShopCareHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsShopCareHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShopId, data.OrgId, data.UserId, data.UsedPower, data.CareTime, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultBsShopCareHistoryModel) tableName() string {
	return m.table
}
