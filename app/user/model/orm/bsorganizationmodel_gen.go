// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsOrganizationFieldNames          = builder.RawFieldNames(&BsOrganization{})
	bsOrganizationRows                = strings.Join(bsOrganizationFieldNames, ",")
	bsOrganizationRowsExpectAutoSet   = strings.Join(stringx.Remove(bsOrganizationFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsOrganizationRowsWithPlaceHolder = strings.Join(stringx.Remove(bsOrganizationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsOrganizationModel interface {
		Insert(ctx context.Context, data *BsOrganization) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsOrganization, error)
		FindOneByOrgName(ctx context.Context, orgName sql.NullString) (*BsOrganization, error)
		Update(ctx context.Context, data *BsOrganization) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsOrganizationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsOrganization struct {
		Id              int64          `db:"id"`                // 组织ID
		OwnerId         int64          `db:"owner_id"`          // 所有者ID
		OrgName         sql.NullString `db:"org_name"`          // 组织名称
		BundleType      int64          `db:"bundle_type"`       // 套餐类型 0: 免费版 1: 基础版 2: AI个人版 3: AI协作版
		MaxSeat         int64          `db:"max_seat"`          // 最大席位数量
		MonthPowerLimit int64          `db:"month_power_limit"` // 当月算力上限
		MonthUsedPower  int64          `db:"month_used_power"`  // 当月已用算力
		MongoPermId     string         `db:"mongo_perm_id"`     // MongoDB中对应的权限文档ID
		CreateTime      time.Time      `db:"create_time"`       // 创建时间
		UpdateTime      time.Time      `db:"update_time"`       // 修改时间
		CreateBy        int64          `db:"create_by"`         // 创建人
		UpdateBy        int64          `db:"update_by"`         // 修改人
	}
)

func newBsOrganizationModel(conn sqlx.SqlConn) *defaultBsOrganizationModel {
	return &defaultBsOrganizationModel{
		conn:  conn,
		table: "`bs_organization`",
	}
}

func (m *defaultBsOrganizationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsOrganizationModel) FindOne(ctx context.Context, id int64) (*BsOrganization, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsOrganizationRows, m.table)
	var resp BsOrganization
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsOrganizationModel) FindOneByOrgName(ctx context.Context, orgName sql.NullString) (*BsOrganization, error) {
	var resp BsOrganization
	query := fmt.Sprintf("select %s from %s where `org_name` = ? limit 1", bsOrganizationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orgName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsOrganizationModel) Insert(ctx context.Context, data *BsOrganization) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsOrganizationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.OwnerId, data.OrgName, data.BundleType, data.MaxSeat, data.MonthPowerLimit, data.MonthUsedPower, data.MongoPermId, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultBsOrganizationModel) Update(ctx context.Context, newData *BsOrganization) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsOrganizationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.OwnerId, newData.OrgName, newData.BundleType, newData.MaxSeat, newData.MonthPowerLimit, newData.MonthUsedPower, newData.MongoPermId, newData.CreateBy, newData.UpdateBy, newData.Id)
	return err
}

func (m *defaultBsOrganizationModel) tableName() string {
	return m.table
}
