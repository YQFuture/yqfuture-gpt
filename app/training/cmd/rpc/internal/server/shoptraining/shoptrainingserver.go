// Code generated by goctl. DO NOT EDIT.
// Source: training.proto

package server

import (
	"context"

	"yufuture-gpt/app/training/cmd/rpc/internal/logic/shoptraining"
	"yufuture-gpt/app/training/cmd/rpc/internal/svc"
	"yufuture-gpt/app/training/cmd/rpc/pb/training"
)

type ShopTrainingServer struct {
	svcCtx *svc.ServiceContext
	training.UnimplementedShopTrainingServer
}

func NewShopTrainingServer(svcCtx *svc.ServiceContext) *ShopTrainingServer {
	return &ShopTrainingServer{
		svcCtx: svcCtx,
	}
}

// 判断店铺是否首次登录 即从未进行过训练
func (s *ShopTrainingServer) JudgeShopFirst(ctx context.Context, in *training.JudgeShopFirstReq) (*training.JudgeShopFirstResp, error) {
	l := shoptraininglogic.NewJudgeShopFirstLogic(ctx, s.svcCtx)
	return l.JudgeShopFirst(in)
}

// 预设店铺
func (s *ShopTrainingServer) PreSettingShop(ctx context.Context, in *training.PreSettingShopReq) (*training.PreSettingShopResp, error) {
	l := shoptraininglogic.NewPreSettingShopLogic(ctx, s.svcCtx)
	return l.PreSettingShop(in)
}

// 取消店铺预设
func (s *ShopTrainingServer) CancelPreSettingShop(ctx context.Context, in *training.CancelPreSettingShopReq) (*training.CancelPreSettingShopResp, error) {
	l := shoptraininglogic.NewCancelPreSettingShopLogic(ctx, s.svcCtx)
	return l.CancelPreSettingShop(in)
}

// 查询店铺列表
func (s *ShopTrainingServer) GetShopPageList(ctx context.Context, in *training.ShopPageListReq) (*training.ShopPageListResp, error) {
	l := shoptraininglogic.NewGetShopPageListLogic(ctx, s.svcCtx)
	return l.GetShopPageList(in)
}

// 训练店铺
func (s *ShopTrainingServer) TrainingShop(ctx context.Context, in *training.TrainingShopReq) (*training.TrainingShopResp, error) {
	l := shoptraininglogic.NewTrainingShopLogic(ctx, s.svcCtx)
	return l.TrainingShop(in)
}

// 获取店铺训练进度
func (s *ShopTrainingServer) GetShopTrainingProgress(ctx context.Context, in *training.GetShopTrainingProgressReq) (*training.GetShopTrainingProgressResp, error) {
	l := shoptraininglogic.NewGetShopTrainingProgressLogic(ctx, s.svcCtx)
	return l.GetShopTrainingProgress(in)
}

// 查询商品列表
func (s *ShopTrainingServer) GetGoodsPageList(ctx context.Context, in *training.GoodsPageListReq) (*training.GoodsPageListResp, error) {
	l := shoptraininglogic.NewGetGoodsPageListLogic(ctx, s.svcCtx)
	return l.GetGoodsPageList(in)
}

// 刷新商品
func (s *ShopTrainingServer) RefreshGoods(ctx context.Context, in *training.RefreshGoodsReq) (*training.RefreshGoodsResp, error) {
	l := shoptraininglogic.NewRefreshGoodsLogic(ctx, s.svcCtx)
	return l.RefreshGoods(in)
}

// 启用商品
func (s *ShopTrainingServer) EnableGoods(ctx context.Context, in *training.EnableGoodsReq) (*training.EnableGoodsResp, error) {
	l := shoptraininglogic.NewEnableGoodsLogic(ctx, s.svcCtx)
	return l.EnableGoods(in)
}

// 禁用商品
func (s *ShopTrainingServer) UnEnableGoods(ctx context.Context, in *training.EnableGoodsReq) (*training.EnableGoodsResp, error) {
	l := shoptraininglogic.NewUnEnableGoodsLogic(ctx, s.svcCtx)
	return l.UnEnableGoods(in)
}

// 预设商品
func (s *ShopTrainingServer) PreSettingGoods(ctx context.Context, in *training.PreSettingGoodsReq) (*training.PreSettingGoodsResp, error) {
	l := shoptraininglogic.NewPreSettingGoodsLogic(ctx, s.svcCtx)
	return l.PreSettingGoods(in)
}

// 取消预设商品
func (s *ShopTrainingServer) CancelPreSettingGoods(ctx context.Context, in *training.CancelPreSettingGoodsReq) (*training.CancelPreSettingGoodsResp, error) {
	l := shoptraininglogic.NewCancelPreSettingGoodsLogic(ctx, s.svcCtx)
	return l.CancelPreSettingGoods(in)
}

// 训练商品
func (s *ShopTrainingServer) TrainingGoods(ctx context.Context, in *training.TrainingGoodsReq) (*training.TrainingGoodsResp, error) {
	l := shoptraininglogic.NewTrainingGoodsLogic(ctx, s.svcCtx)
	return l.TrainingGoods(in)
}

// 获取商品训练进度
func (s *ShopTrainingServer) GetGoodsTrainingProgress(ctx context.Context, in *training.GetGoodsTrainingProgressReq) (*training.GetGoodsTrainingProgressResp, error) {
	l := shoptraininglogic.NewGetGoodsTrainingProgressLogic(ctx, s.svcCtx)
	return l.GetGoodsTrainingProgress(in)
}

// 获取商品训练结果
func (s *ShopTrainingServer) GetGoodsTrainingResult(ctx context.Context, in *training.GetGoodsTrainingResultReq) (*training.GetGoodsTrainingResultResp, error) {
	l := shoptraininglogic.NewGetGoodsTrainingResultLogic(ctx, s.svcCtx)
	return l.GetGoodsTrainingResult(in)
}

// 保存爬取的店铺基本数据
func (s *ShopTrainingServer) SaveShop(ctx context.Context, in *training.SaveShopReq) (*training.SaveShopResp, error) {
	l := shoptraininglogic.NewSaveShopLogic(ctx, s.svcCtx)
	return l.SaveShop(in)
}
