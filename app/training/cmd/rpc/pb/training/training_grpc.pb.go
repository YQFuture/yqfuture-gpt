// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: training.proto

package training

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BasicFunction_GetDictInfoByType_FullMethodName = "/training.BasicFunction/getDictInfoByType"
)

// BasicFunctionClient is the client API for BasicFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicFunctionClient interface {
	GetDictInfoByType(ctx context.Context, in *DictInfoByTypeReq, opts ...grpc.CallOption) (*DictInfoByTypeResp, error)
}

type basicFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicFunctionClient(cc grpc.ClientConnInterface) BasicFunctionClient {
	return &basicFunctionClient{cc}
}

func (c *basicFunctionClient) GetDictInfoByType(ctx context.Context, in *DictInfoByTypeReq, opts ...grpc.CallOption) (*DictInfoByTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictInfoByTypeResp)
	err := c.cc.Invoke(ctx, BasicFunction_GetDictInfoByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicFunctionServer is the server API for BasicFunction service.
// All implementations must embed UnimplementedBasicFunctionServer
// for forward compatibility
type BasicFunctionServer interface {
	GetDictInfoByType(context.Context, *DictInfoByTypeReq) (*DictInfoByTypeResp, error)
	mustEmbedUnimplementedBasicFunctionServer()
}

// UnimplementedBasicFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedBasicFunctionServer struct {
}

func (UnimplementedBasicFunctionServer) GetDictInfoByType(context.Context, *DictInfoByTypeReq) (*DictInfoByTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictInfoByType not implemented")
}
func (UnimplementedBasicFunctionServer) mustEmbedUnimplementedBasicFunctionServer() {}

// UnsafeBasicFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicFunctionServer will
// result in compilation errors.
type UnsafeBasicFunctionServer interface {
	mustEmbedUnimplementedBasicFunctionServer()
}

func RegisterBasicFunctionServer(s grpc.ServiceRegistrar, srv BasicFunctionServer) {
	s.RegisterService(&BasicFunction_ServiceDesc, srv)
}

func _BasicFunction_GetDictInfoByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictInfoByTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicFunctionServer).GetDictInfoByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicFunction_GetDictInfoByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicFunctionServer).GetDictInfoByType(ctx, req.(*DictInfoByTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicFunction_ServiceDesc is the grpc.ServiceDesc for BasicFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.BasicFunction",
	HandlerType: (*BasicFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDictInfoByType",
			Handler:    _BasicFunction_GetDictInfoByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "training.proto",
}

const (
	KnowledgeBaseTraining_PreSetting_FullMethodName = "/training.KnowledgeBaseTraining/preSetting"
)

// KnowledgeBaseTrainingClient is the client API for KnowledgeBaseTraining service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseTrainingClient interface {
	PreSetting(ctx context.Context, in *KnowledgeBaseTrainingReq, opts ...grpc.CallOption) (*KnowledgeBaseTrainingResp, error)
}

type knowledgeBaseTrainingClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseTrainingClient(cc grpc.ClientConnInterface) KnowledgeBaseTrainingClient {
	return &knowledgeBaseTrainingClient{cc}
}

func (c *knowledgeBaseTrainingClient) PreSetting(ctx context.Context, in *KnowledgeBaseTrainingReq, opts ...grpc.CallOption) (*KnowledgeBaseTrainingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeBaseTrainingResp)
	err := c.cc.Invoke(ctx, KnowledgeBaseTraining_PreSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseTrainingServer is the server API for KnowledgeBaseTraining service.
// All implementations must embed UnimplementedKnowledgeBaseTrainingServer
// for forward compatibility
type KnowledgeBaseTrainingServer interface {
	PreSetting(context.Context, *KnowledgeBaseTrainingReq) (*KnowledgeBaseTrainingResp, error)
	mustEmbedUnimplementedKnowledgeBaseTrainingServer()
}

// UnimplementedKnowledgeBaseTrainingServer must be embedded to have forward compatible implementations.
type UnimplementedKnowledgeBaseTrainingServer struct {
}

func (UnimplementedKnowledgeBaseTrainingServer) PreSetting(context.Context, *KnowledgeBaseTrainingReq) (*KnowledgeBaseTrainingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreSetting not implemented")
}
func (UnimplementedKnowledgeBaseTrainingServer) mustEmbedUnimplementedKnowledgeBaseTrainingServer() {}

// UnsafeKnowledgeBaseTrainingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseTrainingServer will
// result in compilation errors.
type UnsafeKnowledgeBaseTrainingServer interface {
	mustEmbedUnimplementedKnowledgeBaseTrainingServer()
}

func RegisterKnowledgeBaseTrainingServer(s grpc.ServiceRegistrar, srv KnowledgeBaseTrainingServer) {
	s.RegisterService(&KnowledgeBaseTraining_ServiceDesc, srv)
}

func _KnowledgeBaseTraining_PreSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeBaseTrainingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseTrainingServer).PreSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseTraining_PreSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseTrainingServer).PreSetting(ctx, req.(*KnowledgeBaseTrainingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseTraining_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseTraining service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseTraining_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.KnowledgeBaseTraining",
	HandlerType: (*KnowledgeBaseTrainingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "preSetting",
			Handler:    _KnowledgeBaseTraining_PreSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "training.proto",
}

const (
	ShopTraining_JudgeShopFirst_FullMethodName           = "/training.ShopTraining/judgeShopFirst"
	ShopTraining_PreSettingShop_FullMethodName           = "/training.ShopTraining/preSettingShop"
	ShopTraining_CancelPreSettingShop_FullMethodName     = "/training.ShopTraining/cancelPreSettingShop"
	ShopTraining_GetShopPageList_FullMethodName          = "/training.ShopTraining/getShopPageList"
	ShopTraining_TrainingShop_FullMethodName             = "/training.ShopTraining/trainingShop"
	ShopTraining_GetShopTrainingProgress_FullMethodName  = "/training.ShopTraining/getShopTrainingProgress"
	ShopTraining_GetGoodsPageList_FullMethodName         = "/training.ShopTraining/getGoodsPageList"
	ShopTraining_RefreshGoods_FullMethodName             = "/training.ShopTraining/refreshGoods"
	ShopTraining_EnableGoods_FullMethodName              = "/training.ShopTraining/enableGoods"
	ShopTraining_UnEnableGoods_FullMethodName            = "/training.ShopTraining/unEnableGoods"
	ShopTraining_PreSettingGoods_FullMethodName          = "/training.ShopTraining/preSettingGoods"
	ShopTraining_CancelPreSettingGoods_FullMethodName    = "/training.ShopTraining/cancelPreSettingGoods"
	ShopTraining_TrainingGoods_FullMethodName            = "/training.ShopTraining/trainingGoods"
	ShopTraining_GetGoodsTrainingProgress_FullMethodName = "/training.ShopTraining/getGoodsTrainingProgress"
	ShopTraining_GetGoodsTrainingResult_FullMethodName   = "/training.ShopTraining/getGoodsTrainingResult"
	ShopTraining_SaveShop_FullMethodName                 = "/training.ShopTraining/saveShop"
)

// ShopTrainingClient is the client API for ShopTraining service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopTrainingClient interface {
	// 判断店铺是否首次登录 即从未进行过训练
	JudgeShopFirst(ctx context.Context, in *JudgeShopFirstReq, opts ...grpc.CallOption) (*JudgeShopFirstResp, error)
	// 预设店铺
	PreSettingShop(ctx context.Context, in *PreSettingShopReq, opts ...grpc.CallOption) (*PreSettingShopResp, error)
	// 取消店铺预设
	CancelPreSettingShop(ctx context.Context, in *CancelPreSettingShopReq, opts ...grpc.CallOption) (*CancelPreSettingShopResp, error)
	// 查询店铺列表
	GetShopPageList(ctx context.Context, in *ShopPageListReq, opts ...grpc.CallOption) (*ShopPageListResp, error)
	// 训练店铺
	TrainingShop(ctx context.Context, in *TrainingShopReq, opts ...grpc.CallOption) (*TrainingShopResp, error)
	// 获取店铺训练进度
	GetShopTrainingProgress(ctx context.Context, in *GetShopTrainingProgressReq, opts ...grpc.CallOption) (*GetShopTrainingProgressResp, error)
	// 查询商品列表
	GetGoodsPageList(ctx context.Context, in *GoodsPageListReq, opts ...grpc.CallOption) (*GoodsPageListResp, error)
	// 刷新商品
	RefreshGoods(ctx context.Context, in *RefreshGoodsReq, opts ...grpc.CallOption) (*RefreshGoodsResp, error)
	// 启用商品
	EnableGoods(ctx context.Context, in *EnableGoodsReq, opts ...grpc.CallOption) (*EnableGoodsResp, error)
	// 禁用商品
	UnEnableGoods(ctx context.Context, in *EnableGoodsReq, opts ...grpc.CallOption) (*EnableGoodsResp, error)
	// 预设商品
	PreSettingGoods(ctx context.Context, in *PreSettingGoodsReq, opts ...grpc.CallOption) (*PreSettingGoodsResp, error)
	// 取消预设商品
	CancelPreSettingGoods(ctx context.Context, in *CancelPreSettingGoodsReq, opts ...grpc.CallOption) (*CancelPreSettingGoodsResp, error)
	// 训练商品
	TrainingGoods(ctx context.Context, in *TrainingGoodsReq, opts ...grpc.CallOption) (*TrainingGoodsResp, error)
	// 获取商品训练进度
	GetGoodsTrainingProgress(ctx context.Context, in *GetGoodsTrainingProgressReq, opts ...grpc.CallOption) (*GetGoodsTrainingProgressResp, error)
	// 获取商品训练结果
	GetGoodsTrainingResult(ctx context.Context, in *GetGoodsTrainingResultReq, opts ...grpc.CallOption) (*GetGoodsTrainingResultResp, error)
	// 保存爬取的店铺基本数据
	SaveShop(ctx context.Context, in *SaveShopReq, opts ...grpc.CallOption) (*SaveShopResp, error)
}

type shopTrainingClient struct {
	cc grpc.ClientConnInterface
}

func NewShopTrainingClient(cc grpc.ClientConnInterface) ShopTrainingClient {
	return &shopTrainingClient{cc}
}

func (c *shopTrainingClient) JudgeShopFirst(ctx context.Context, in *JudgeShopFirstReq, opts ...grpc.CallOption) (*JudgeShopFirstResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JudgeShopFirstResp)
	err := c.cc.Invoke(ctx, ShopTraining_JudgeShopFirst_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) PreSettingShop(ctx context.Context, in *PreSettingShopReq, opts ...grpc.CallOption) (*PreSettingShopResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreSettingShopResp)
	err := c.cc.Invoke(ctx, ShopTraining_PreSettingShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) CancelPreSettingShop(ctx context.Context, in *CancelPreSettingShopReq, opts ...grpc.CallOption) (*CancelPreSettingShopResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPreSettingShopResp)
	err := c.cc.Invoke(ctx, ShopTraining_CancelPreSettingShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) GetShopPageList(ctx context.Context, in *ShopPageListReq, opts ...grpc.CallOption) (*ShopPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopPageListResp)
	err := c.cc.Invoke(ctx, ShopTraining_GetShopPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) TrainingShop(ctx context.Context, in *TrainingShopReq, opts ...grpc.CallOption) (*TrainingShopResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainingShopResp)
	err := c.cc.Invoke(ctx, ShopTraining_TrainingShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) GetShopTrainingProgress(ctx context.Context, in *GetShopTrainingProgressReq, opts ...grpc.CallOption) (*GetShopTrainingProgressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShopTrainingProgressResp)
	err := c.cc.Invoke(ctx, ShopTraining_GetShopTrainingProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) GetGoodsPageList(ctx context.Context, in *GoodsPageListReq, opts ...grpc.CallOption) (*GoodsPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsPageListResp)
	err := c.cc.Invoke(ctx, ShopTraining_GetGoodsPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) RefreshGoods(ctx context.Context, in *RefreshGoodsReq, opts ...grpc.CallOption) (*RefreshGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshGoodsResp)
	err := c.cc.Invoke(ctx, ShopTraining_RefreshGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) EnableGoods(ctx context.Context, in *EnableGoodsReq, opts ...grpc.CallOption) (*EnableGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableGoodsResp)
	err := c.cc.Invoke(ctx, ShopTraining_EnableGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) UnEnableGoods(ctx context.Context, in *EnableGoodsReq, opts ...grpc.CallOption) (*EnableGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableGoodsResp)
	err := c.cc.Invoke(ctx, ShopTraining_UnEnableGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) PreSettingGoods(ctx context.Context, in *PreSettingGoodsReq, opts ...grpc.CallOption) (*PreSettingGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreSettingGoodsResp)
	err := c.cc.Invoke(ctx, ShopTraining_PreSettingGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) CancelPreSettingGoods(ctx context.Context, in *CancelPreSettingGoodsReq, opts ...grpc.CallOption) (*CancelPreSettingGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPreSettingGoodsResp)
	err := c.cc.Invoke(ctx, ShopTraining_CancelPreSettingGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) TrainingGoods(ctx context.Context, in *TrainingGoodsReq, opts ...grpc.CallOption) (*TrainingGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainingGoodsResp)
	err := c.cc.Invoke(ctx, ShopTraining_TrainingGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) GetGoodsTrainingProgress(ctx context.Context, in *GetGoodsTrainingProgressReq, opts ...grpc.CallOption) (*GetGoodsTrainingProgressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoodsTrainingProgressResp)
	err := c.cc.Invoke(ctx, ShopTraining_GetGoodsTrainingProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) GetGoodsTrainingResult(ctx context.Context, in *GetGoodsTrainingResultReq, opts ...grpc.CallOption) (*GetGoodsTrainingResultResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoodsTrainingResultResp)
	err := c.cc.Invoke(ctx, ShopTraining_GetGoodsTrainingResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopTrainingClient) SaveShop(ctx context.Context, in *SaveShopReq, opts ...grpc.CallOption) (*SaveShopResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveShopResp)
	err := c.cc.Invoke(ctx, ShopTraining_SaveShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopTrainingServer is the server API for ShopTraining service.
// All implementations must embed UnimplementedShopTrainingServer
// for forward compatibility
type ShopTrainingServer interface {
	// 判断店铺是否首次登录 即从未进行过训练
	JudgeShopFirst(context.Context, *JudgeShopFirstReq) (*JudgeShopFirstResp, error)
	// 预设店铺
	PreSettingShop(context.Context, *PreSettingShopReq) (*PreSettingShopResp, error)
	// 取消店铺预设
	CancelPreSettingShop(context.Context, *CancelPreSettingShopReq) (*CancelPreSettingShopResp, error)
	// 查询店铺列表
	GetShopPageList(context.Context, *ShopPageListReq) (*ShopPageListResp, error)
	// 训练店铺
	TrainingShop(context.Context, *TrainingShopReq) (*TrainingShopResp, error)
	// 获取店铺训练进度
	GetShopTrainingProgress(context.Context, *GetShopTrainingProgressReq) (*GetShopTrainingProgressResp, error)
	// 查询商品列表
	GetGoodsPageList(context.Context, *GoodsPageListReq) (*GoodsPageListResp, error)
	// 刷新商品
	RefreshGoods(context.Context, *RefreshGoodsReq) (*RefreshGoodsResp, error)
	// 启用商品
	EnableGoods(context.Context, *EnableGoodsReq) (*EnableGoodsResp, error)
	// 禁用商品
	UnEnableGoods(context.Context, *EnableGoodsReq) (*EnableGoodsResp, error)
	// 预设商品
	PreSettingGoods(context.Context, *PreSettingGoodsReq) (*PreSettingGoodsResp, error)
	// 取消预设商品
	CancelPreSettingGoods(context.Context, *CancelPreSettingGoodsReq) (*CancelPreSettingGoodsResp, error)
	// 训练商品
	TrainingGoods(context.Context, *TrainingGoodsReq) (*TrainingGoodsResp, error)
	// 获取商品训练进度
	GetGoodsTrainingProgress(context.Context, *GetGoodsTrainingProgressReq) (*GetGoodsTrainingProgressResp, error)
	// 获取商品训练结果
	GetGoodsTrainingResult(context.Context, *GetGoodsTrainingResultReq) (*GetGoodsTrainingResultResp, error)
	// 保存爬取的店铺基本数据
	SaveShop(context.Context, *SaveShopReq) (*SaveShopResp, error)
	mustEmbedUnimplementedShopTrainingServer()
}

// UnimplementedShopTrainingServer must be embedded to have forward compatible implementations.
type UnimplementedShopTrainingServer struct {
}

func (UnimplementedShopTrainingServer) JudgeShopFirst(context.Context, *JudgeShopFirstReq) (*JudgeShopFirstResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeShopFirst not implemented")
}
func (UnimplementedShopTrainingServer) PreSettingShop(context.Context, *PreSettingShopReq) (*PreSettingShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreSettingShop not implemented")
}
func (UnimplementedShopTrainingServer) CancelPreSettingShop(context.Context, *CancelPreSettingShopReq) (*CancelPreSettingShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPreSettingShop not implemented")
}
func (UnimplementedShopTrainingServer) GetShopPageList(context.Context, *ShopPageListReq) (*ShopPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopPageList not implemented")
}
func (UnimplementedShopTrainingServer) TrainingShop(context.Context, *TrainingShopReq) (*TrainingShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingShop not implemented")
}
func (UnimplementedShopTrainingServer) GetShopTrainingProgress(context.Context, *GetShopTrainingProgressReq) (*GetShopTrainingProgressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopTrainingProgress not implemented")
}
func (UnimplementedShopTrainingServer) GetGoodsPageList(context.Context, *GoodsPageListReq) (*GoodsPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsPageList not implemented")
}
func (UnimplementedShopTrainingServer) RefreshGoods(context.Context, *RefreshGoodsReq) (*RefreshGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshGoods not implemented")
}
func (UnimplementedShopTrainingServer) EnableGoods(context.Context, *EnableGoodsReq) (*EnableGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableGoods not implemented")
}
func (UnimplementedShopTrainingServer) UnEnableGoods(context.Context, *EnableGoodsReq) (*EnableGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnEnableGoods not implemented")
}
func (UnimplementedShopTrainingServer) PreSettingGoods(context.Context, *PreSettingGoodsReq) (*PreSettingGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreSettingGoods not implemented")
}
func (UnimplementedShopTrainingServer) CancelPreSettingGoods(context.Context, *CancelPreSettingGoodsReq) (*CancelPreSettingGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPreSettingGoods not implemented")
}
func (UnimplementedShopTrainingServer) TrainingGoods(context.Context, *TrainingGoodsReq) (*TrainingGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingGoods not implemented")
}
func (UnimplementedShopTrainingServer) GetGoodsTrainingProgress(context.Context, *GetGoodsTrainingProgressReq) (*GetGoodsTrainingProgressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsTrainingProgress not implemented")
}
func (UnimplementedShopTrainingServer) GetGoodsTrainingResult(context.Context, *GetGoodsTrainingResultReq) (*GetGoodsTrainingResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsTrainingResult not implemented")
}
func (UnimplementedShopTrainingServer) SaveShop(context.Context, *SaveShopReq) (*SaveShopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShop not implemented")
}
func (UnimplementedShopTrainingServer) mustEmbedUnimplementedShopTrainingServer() {}

// UnsafeShopTrainingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopTrainingServer will
// result in compilation errors.
type UnsafeShopTrainingServer interface {
	mustEmbedUnimplementedShopTrainingServer()
}

func RegisterShopTrainingServer(s grpc.ServiceRegistrar, srv ShopTrainingServer) {
	s.RegisterService(&ShopTraining_ServiceDesc, srv)
}

func _ShopTraining_JudgeShopFirst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeShopFirstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).JudgeShopFirst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_JudgeShopFirst_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).JudgeShopFirst(ctx, req.(*JudgeShopFirstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_PreSettingShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreSettingShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).PreSettingShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_PreSettingShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).PreSettingShop(ctx, req.(*PreSettingShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_CancelPreSettingShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPreSettingShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).CancelPreSettingShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_CancelPreSettingShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).CancelPreSettingShop(ctx, req.(*CancelPreSettingShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_GetShopPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).GetShopPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_GetShopPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).GetShopPageList(ctx, req.(*ShopPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_TrainingShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).TrainingShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_TrainingShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).TrainingShop(ctx, req.(*TrainingShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_GetShopTrainingProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopTrainingProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).GetShopTrainingProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_GetShopTrainingProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).GetShopTrainingProgress(ctx, req.(*GetShopTrainingProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_GetGoodsPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).GetGoodsPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_GetGoodsPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).GetGoodsPageList(ctx, req.(*GoodsPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_RefreshGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).RefreshGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_RefreshGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).RefreshGoods(ctx, req.(*RefreshGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_EnableGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).EnableGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_EnableGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).EnableGoods(ctx, req.(*EnableGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_UnEnableGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).UnEnableGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_UnEnableGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).UnEnableGoods(ctx, req.(*EnableGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_PreSettingGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreSettingGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).PreSettingGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_PreSettingGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).PreSettingGoods(ctx, req.(*PreSettingGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_CancelPreSettingGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPreSettingGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).CancelPreSettingGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_CancelPreSettingGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).CancelPreSettingGoods(ctx, req.(*CancelPreSettingGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_TrainingGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).TrainingGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_TrainingGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).TrainingGoods(ctx, req.(*TrainingGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_GetGoodsTrainingProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsTrainingProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).GetGoodsTrainingProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_GetGoodsTrainingProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).GetGoodsTrainingProgress(ctx, req.(*GetGoodsTrainingProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_GetGoodsTrainingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsTrainingResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).GetGoodsTrainingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_GetGoodsTrainingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).GetGoodsTrainingResult(ctx, req.(*GetGoodsTrainingResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopTraining_SaveShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveShopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopTrainingServer).SaveShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopTraining_SaveShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopTrainingServer).SaveShop(ctx, req.(*SaveShopReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopTraining_ServiceDesc is the grpc.ServiceDesc for ShopTraining service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopTraining_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.ShopTraining",
	HandlerType: (*ShopTrainingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "judgeShopFirst",
			Handler:    _ShopTraining_JudgeShopFirst_Handler,
		},
		{
			MethodName: "preSettingShop",
			Handler:    _ShopTraining_PreSettingShop_Handler,
		},
		{
			MethodName: "cancelPreSettingShop",
			Handler:    _ShopTraining_CancelPreSettingShop_Handler,
		},
		{
			MethodName: "getShopPageList",
			Handler:    _ShopTraining_GetShopPageList_Handler,
		},
		{
			MethodName: "trainingShop",
			Handler:    _ShopTraining_TrainingShop_Handler,
		},
		{
			MethodName: "getShopTrainingProgress",
			Handler:    _ShopTraining_GetShopTrainingProgress_Handler,
		},
		{
			MethodName: "getGoodsPageList",
			Handler:    _ShopTraining_GetGoodsPageList_Handler,
		},
		{
			MethodName: "refreshGoods",
			Handler:    _ShopTraining_RefreshGoods_Handler,
		},
		{
			MethodName: "enableGoods",
			Handler:    _ShopTraining_EnableGoods_Handler,
		},
		{
			MethodName: "unEnableGoods",
			Handler:    _ShopTraining_UnEnableGoods_Handler,
		},
		{
			MethodName: "preSettingGoods",
			Handler:    _ShopTraining_PreSettingGoods_Handler,
		},
		{
			MethodName: "cancelPreSettingGoods",
			Handler:    _ShopTraining_CancelPreSettingGoods_Handler,
		},
		{
			MethodName: "trainingGoods",
			Handler:    _ShopTraining_TrainingGoods_Handler,
		},
		{
			MethodName: "getGoodsTrainingProgress",
			Handler:    _ShopTraining_GetGoodsTrainingProgress_Handler,
		},
		{
			MethodName: "getGoodsTrainingResult",
			Handler:    _ShopTraining_GetGoodsTrainingResult_Handler,
		},
		{
			MethodName: "saveShop",
			Handler:    _ShopTraining_SaveShop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "training.proto",
}
