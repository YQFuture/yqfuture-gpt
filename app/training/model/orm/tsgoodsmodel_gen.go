// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tsGoodsFieldNames          = builder.RawFieldNames(&TsGoods{})
	tsGoodsRows                = strings.Join(tsGoodsFieldNames, ",")
	tsGoodsRowsExpectAutoSet   = strings.Join(stringx.Remove(tsGoodsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tsGoodsRowsWithPlaceHolder = strings.Join(stringx.Remove(tsGoodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tsGoodsModel interface {
		Insert(ctx context.Context, data *TsGoods) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TsGoods, error)
		Update(ctx context.Context, data *TsGoods) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTsGoodsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TsGoods struct {
		Id              int64     `db:"id"`               // 商品ID
		ShopId          int64     `db:"shop_id"`          // 店铺ID
		GoodsName       string    `db:"goods_name"`       // 商品名称
		GoodsUrl        string    `db:"goods_url"`        // 商品url
		TrainingSummary string    `db:"training_summary"` // 训练结果摘要
		PlatformType    int64     `db:"platform_type"`    // 平台类型 0: 未定义 1: 京东 2: 拼多多 3: 千牛
		Enabled         int64     `db:"enabled"`          // 启用状态 0: 未启用 1: 启用
		TrainingStatus  int64     `db:"training_status"`  // 训练状态 0: 未训练 1: 训练中 2: 训练完成
		TrainingTimes   int64     `db:"training_times"`   // 训练次数
		CreateTime      time.Time `db:"create_time"`      // 创建时间
		UpdateTime      time.Time `db:"update_time"`      // 修改时间
		CreateBy        int64     `db:"create_by"`        // 创建人
		UpdateBy        int64     `db:"update_by"`        // 修改人
	}
)

func newTsGoodsModel(conn sqlx.SqlConn) *defaultTsGoodsModel {
	return &defaultTsGoodsModel{
		conn:  conn,
		table: "`ts_goods`",
	}
}

func (m *defaultTsGoodsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTsGoodsModel) FindOne(ctx context.Context, id int64) (*TsGoods, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tsGoodsRows, m.table)
	var resp TsGoods
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTsGoodsModel) Insert(ctx context.Context, data *TsGoods) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tsGoodsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ShopId, data.GoodsName, data.GoodsUrl, data.TrainingSummary, data.PlatformType, data.Enabled, data.TrainingStatus, data.TrainingTimes, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultTsGoodsModel) Update(ctx context.Context, data *TsGoods) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tsGoodsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShopId, data.GoodsName, data.GoodsUrl, data.TrainingSummary, data.PlatformType, data.Enabled, data.TrainingStatus, data.TrainingTimes, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultTsGoodsModel) tableName() string {
	return m.table
}
