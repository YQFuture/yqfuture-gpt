// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsDictTypeFieldNames          = builder.RawFieldNames(&BsDictType{})
	bsDictTypeRows                = strings.Join(bsDictTypeFieldNames, ",")
	bsDictTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(bsDictTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsDictTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(bsDictTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsDictTypeModel interface {
		Insert(ctx context.Context, data *BsDictType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsDictType, error)
		Update(ctx context.Context, data *BsDictType) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsDictTypeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsDictType struct {
		Id         int64     `db:"id"`         // ID
		CreateTime time.Time `db:"createTime"` // 创建时间
		UpdateTime time.Time `db:"updateTime"` // 更新时间
		Name       string    `db:"name"`       // 名称
		Key        string    `db:"key"`        // 标识
	}
)

func newBsDictTypeModel(conn sqlx.SqlConn) *defaultBsDictTypeModel {
	return &defaultBsDictTypeModel{
		conn:  conn,
		table: "`bs_dict_type`",
	}
}

func (m *defaultBsDictTypeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsDictTypeModel) FindOne(ctx context.Context, id int64) (*BsDictType, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsDictTypeRows, m.table)
	var resp BsDictType
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsDictTypeModel) Insert(ctx context.Context, data *BsDictType) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bsDictTypeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreateTime, data.UpdateTime, data.Name, data.Key)
	return ret, err
}

func (m *defaultBsDictTypeModel) Update(ctx context.Context, data *BsDictType) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsDictTypeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CreateTime, data.UpdateTime, data.Name, data.Key, data.Id)
	return err
}

func (m *defaultBsDictTypeModel) tableName() string {
	return m.table
}
