// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bsDictInfoFieldNames          = builder.RawFieldNames(&BsDictInfo{})
	bsDictInfoRows                = strings.Join(bsDictInfoFieldNames, ",")
	bsDictInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(bsDictInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bsDictInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(bsDictInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bsDictInfoModel interface {
		Insert(ctx context.Context, data *BsDictInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BsDictInfo, error)
		Update(ctx context.Context, data *BsDictInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBsDictInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BsDictInfo struct {
		Id         int64          `db:"id"`         // ID
		CreateTime time.Time      `db:"createTime"` // 创建时间
		UpdateTime time.Time      `db:"updateTime"` // 更新时间
		TypeId     int64          `db:"typeId"`     // 类型ID
		Name       string         `db:"name"`       // 名称
		Value      sql.NullString `db:"value"`      // 值
		OrderNum   int64          `db:"orderNum"`   // 排序
		Remark     sql.NullString `db:"remark"`     // 备注
		ParentId   sql.NullInt64  `db:"parentId"`   // 父ID
	}
)

func newBsDictInfoModel(conn sqlx.SqlConn) *defaultBsDictInfoModel {
	return &defaultBsDictInfoModel{
		conn:  conn,
		table: "`bs_dict_info`",
	}
}

func (m *defaultBsDictInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBsDictInfoModel) FindOne(ctx context.Context, id int64) (*BsDictInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bsDictInfoRows, m.table)
	var resp BsDictInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBsDictInfoModel) Insert(ctx context.Context, data *BsDictInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, bsDictInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreateTime, data.UpdateTime, data.TypeId, data.Name, data.Value, data.OrderNum, data.Remark, data.ParentId)
	return ret, err
}

func (m *defaultBsDictInfoModel) Update(ctx context.Context, data *BsDictInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bsDictInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CreateTime, data.UpdateTime, data.TypeId, data.Name, data.Value, data.OrderNum, data.Remark, data.ParentId, data.Id)
	return err
}

func (m *defaultBsDictInfoModel) tableName() string {
	return m.table
}
