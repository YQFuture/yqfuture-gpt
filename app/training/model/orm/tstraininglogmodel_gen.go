// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tsTrainingLogFieldNames          = builder.RawFieldNames(&TsTrainingLog{})
	tsTrainingLogRows                = strings.Join(tsTrainingLogFieldNames, ",")
	tsTrainingLogRowsExpectAutoSet   = strings.Join(stringx.Remove(tsTrainingLogFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tsTrainingLogRowsWithPlaceHolder = strings.Join(stringx.Remove(tsTrainingLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tsTrainingLogModel interface {
		Insert(ctx context.Context, data *TsTrainingLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TsTrainingLog, error)
		Update(ctx context.Context, data *TsTrainingLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTsTrainingLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TsTrainingLog struct {
		Id               int64         `db:"id"`                 // ID
		TrainingObject   sql.NullInt64 `db:"training_object"`    // 训练对象 0: 未定义 1: 店铺 2: 商品
		TrainingObjectId sql.NullInt64 `db:"training_object_id"` // 训练对象ID
		StartTime        sql.NullTime  `db:"start_time"`         // 开始时间
		EndTime          sql.NullTime  `db:"end_time"`           // 结束时间
		CreateTime       time.Time     `db:"create_time"`        // 创建时间
		UpdateTime       sql.NullTime  `db:"update_time"`        // 修改时间
		CreateBy         sql.NullInt64 `db:"create_by"`          // 创建人
		UpdateBy         sql.NullInt64 `db:"update_by"`          // 修改人
	}
)

func newTsTrainingLogModel(conn sqlx.SqlConn) *defaultTsTrainingLogModel {
	return &defaultTsTrainingLogModel{
		conn:  conn,
		table: "`ts_training_log`",
	}
}

func (m *defaultTsTrainingLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTsTrainingLogModel) FindOne(ctx context.Context, id int64) (*TsTrainingLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tsTrainingLogRows, m.table)
	var resp TsTrainingLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTsTrainingLogModel) Insert(ctx context.Context, data *TsTrainingLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tsTrainingLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.TrainingObject, data.TrainingObjectId, data.StartTime, data.EndTime, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultTsTrainingLogModel) Update(ctx context.Context, data *TsTrainingLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tsTrainingLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TrainingObject, data.TrainingObjectId, data.StartTime, data.EndTime, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultTsTrainingLogModel) tableName() string {
	return m.table
}
