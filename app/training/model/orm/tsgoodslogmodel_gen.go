// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tsGoodsLogFieldNames          = builder.RawFieldNames(&TsGoodsLog{})
	tsGoodsLogRows                = strings.Join(tsGoodsLogFieldNames, ",")
	tsGoodsLogRowsExpectAutoSet   = strings.Join(stringx.Remove(tsGoodsLogFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tsGoodsLogRowsWithPlaceHolder = strings.Join(stringx.Remove(tsGoodsLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tsGoodsLogModel interface {
		Insert(ctx context.Context, data *TsGoodsLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TsGoodsLog, error)
		Update(ctx context.Context, data *TsGoodsLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTsGoodsLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TsGoodsLog struct {
		Id             int64     `db:"id"`              // 商品训练ID
		ShopLogId      int64     `db:"shop_log_id"`     // 店铺训练历史ID
		GoodsId        int64     `db:"goods_id"`        // 商品ID
		TrainingResult int64     `db:"training_result"` // 训练结果 0: 未知 1: 成功 2: 失败
		Token          int64     `db:"token"`           // 消耗的token
		Power          int64     `db:"power"`           // 消耗的算力
		StartTime      time.Time `db:"start_time"`      // 开始时间
		EndTime        time.Time `db:"end_time"`        // 结束时间
		CreateTime     time.Time `db:"create_time"`     // 创建时间
		UpdateTime     time.Time `db:"update_time"`     // 修改时间
		CreateBy       int64     `db:"create_by"`       // 创建人
		UpdateBy       int64     `db:"update_by"`       // 修改人
	}
)

func newTsGoodsLogModel(conn sqlx.SqlConn) *defaultTsGoodsLogModel {
	return &defaultTsGoodsLogModel{
		conn:  conn,
		table: "`ts_goods_log`",
	}
}

func (m *defaultTsGoodsLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTsGoodsLogModel) FindOne(ctx context.Context, id int64) (*TsGoodsLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tsGoodsLogRows, m.table)
	var resp TsGoodsLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTsGoodsLogModel) Insert(ctx context.Context, data *TsGoodsLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tsGoodsLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ShopLogId, data.GoodsId, data.TrainingResult, data.Token, data.Power, data.StartTime, data.EndTime, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultTsGoodsLogModel) Update(ctx context.Context, data *TsGoodsLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tsGoodsLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShopLogId, data.GoodsId, data.TrainingResult, data.Token, data.Power, data.StartTime, data.EndTime, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultTsGoodsLogModel) tableName() string {
	return m.table
}
