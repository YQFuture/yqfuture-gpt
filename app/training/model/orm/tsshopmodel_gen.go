// Code generated by goctl. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tsShopFieldNames          = builder.RawFieldNames(&TsShop{})
	tsShopRows                = strings.Join(tsShopFieldNames, ",")
	tsShopRowsExpectAutoSet   = strings.Join(stringx.Remove(tsShopFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tsShopRowsWithPlaceHolder = strings.Join(stringx.Remove(tsShopFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tsShopModel interface {
		Insert(ctx context.Context, data *TsShop) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TsShop, error)
		Update(ctx context.Context, data *TsShop) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTsShopModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TsShop struct {
		Id             int64          `db:"id"`              // 店铺ID
		ShopName       sql.NullString `db:"shop_name"`       // 店铺名称
		UserId         sql.NullInt64  `db:"user_id"`         // 用户ID
		GroupId        sql.NullInt64  `db:"group_id"`        // 组织ID
		PlatformType   int64          `db:"platform_type"`   // 平台类型 0: 未知 1: 京东 2: 拼多多 3: 千牛
		TrainingStatus int64          `db:"training_status"` // 训练状态 0: 初始 1: 训练中 2: 训练完成
		TrainingTimes  int64          `db:"training_times"`  // 训练次数
		CreateTime     time.Time      `db:"create_time"`     // 创建时间
		UpdateTime     sql.NullTime   `db:"update_time"`     // 修改时间
		CreateBy       sql.NullInt64  `db:"create_by"`       // 创建人
		UpdateBy       sql.NullInt64  `db:"update_by"`       // 修改人
	}
)

func newTsShopModel(conn sqlx.SqlConn) *defaultTsShopModel {
	return &defaultTsShopModel{
		conn:  conn,
		table: "`ts_shop`",
	}
}

func (m *defaultTsShopModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTsShopModel) FindOne(ctx context.Context, id int64) (*TsShop, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tsShopRows, m.table)
	var resp TsShop
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTsShopModel) Insert(ctx context.Context, data *TsShop) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tsShopRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ShopName, data.UserId, data.GroupId, data.PlatformType, data.TrainingStatus, data.TrainingTimes, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultTsShopModel) Update(ctx context.Context, data *TsShop) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tsShopRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShopName, data.UserId, data.GroupId, data.PlatformType, data.TrainingStatus, data.TrainingTimes, data.CreateBy, data.UpdateBy, data.Id)
	return err
}

func (m *defaultTsShopModel) tableName() string {
	return m.table
}
